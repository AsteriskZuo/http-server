// This file is generated by rust-protobuf 2.25.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `route_result.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_1;

#[derive(PartialEq,Clone,Default)]
pub struct RoadForm {
    // message fields
    pub fromIndex: u32,
    pub toIndex: u32,
    pub form: u32,
    pub modelID: u32,
    pub floor: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RoadForm {
    fn default() -> &'a RoadForm {
        <RoadForm as ::protobuf::Message>::default_instance()
    }
}

impl RoadForm {
    pub fn new() -> RoadForm {
        ::std::default::Default::default()
    }

    // uint32 fromIndex = 1;


    pub fn get_fromIndex(&self) -> u32 {
        self.fromIndex
    }
    pub fn clear_fromIndex(&mut self) {
        self.fromIndex = 0;
    }

    // Param is passed by value, moved
    pub fn set_fromIndex(&mut self, v: u32) {
        self.fromIndex = v;
    }

    // uint32 toIndex = 2;


    pub fn get_toIndex(&self) -> u32 {
        self.toIndex
    }
    pub fn clear_toIndex(&mut self) {
        self.toIndex = 0;
    }

    // Param is passed by value, moved
    pub fn set_toIndex(&mut self, v: u32) {
        self.toIndex = v;
    }

    // uint32 form = 3;


    pub fn get_form(&self) -> u32 {
        self.form
    }
    pub fn clear_form(&mut self) {
        self.form = 0;
    }

    // Param is passed by value, moved
    pub fn set_form(&mut self, v: u32) {
        self.form = v;
    }

    // uint32 modelID = 4;


    pub fn get_modelID(&self) -> u32 {
        self.modelID
    }
    pub fn clear_modelID(&mut self) {
        self.modelID = 0;
    }

    // Param is passed by value, moved
    pub fn set_modelID(&mut self, v: u32) {
        self.modelID = v;
    }

    // int32 floor = 5;


    pub fn get_floor(&self) -> i32 {
        self.floor
    }
    pub fn clear_floor(&mut self) {
        self.floor = 0;
    }

    // Param is passed by value, moved
    pub fn set_floor(&mut self, v: i32) {
        self.floor = v;
    }
}

impl ::protobuf::Message for RoadForm {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.fromIndex = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.toIndex = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.form = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.modelID = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.floor = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.fromIndex != 0 {
            my_size += ::protobuf::rt::value_size(1, self.fromIndex, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.toIndex != 0 {
            my_size += ::protobuf::rt::value_size(2, self.toIndex, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.form != 0 {
            my_size += ::protobuf::rt::value_size(3, self.form, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.modelID != 0 {
            my_size += ::protobuf::rt::value_size(4, self.modelID, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.floor != 0 {
            my_size += ::protobuf::rt::value_size(5, self.floor, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.fromIndex != 0 {
            os.write_uint32(1, self.fromIndex)?;
        }
        if self.toIndex != 0 {
            os.write_uint32(2, self.toIndex)?;
        }
        if self.form != 0 {
            os.write_uint32(3, self.form)?;
        }
        if self.modelID != 0 {
            os.write_uint32(4, self.modelID)?;
        }
        if self.floor != 0 {
            os.write_int32(5, self.floor)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RoadForm {
        RoadForm::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "fromIndex",
                |m: &RoadForm| { &m.fromIndex },
                |m: &mut RoadForm| { &mut m.fromIndex },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "toIndex",
                |m: &RoadForm| { &m.toIndex },
                |m: &mut RoadForm| { &mut m.toIndex },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "form",
                |m: &RoadForm| { &m.form },
                |m: &mut RoadForm| { &mut m.form },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "modelID",
                |m: &RoadForm| { &m.modelID },
                |m: &mut RoadForm| { &mut m.modelID },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "floor",
                |m: &RoadForm| { &m.floor },
                |m: &mut RoadForm| { &mut m.floor },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RoadForm>(
                "RoadForm",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RoadForm {
        static instance: ::protobuf::rt::LazyV2<RoadForm> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RoadForm::new)
    }
}

impl ::protobuf::Clear for RoadForm {
    fn clear(&mut self) {
        self.fromIndex = 0;
        self.toIndex = 0;
        self.form = 0;
        self.modelID = 0;
        self.floor = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RoadForm {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RoadForm {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RoadPoint {
    // message fields
    pub longitude: f64,
    pub latitude: f64,
    pub height: i32,
    pub scale: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RoadPoint {
    fn default() -> &'a RoadPoint {
        <RoadPoint as ::protobuf::Message>::default_instance()
    }
}

impl RoadPoint {
    pub fn new() -> RoadPoint {
        ::std::default::Default::default()
    }

    // double longitude = 1;


    pub fn get_longitude(&self) -> f64 {
        self.longitude
    }
    pub fn clear_longitude(&mut self) {
        self.longitude = 0.;
    }

    // Param is passed by value, moved
    pub fn set_longitude(&mut self, v: f64) {
        self.longitude = v;
    }

    // double latitude = 2;


    pub fn get_latitude(&self) -> f64 {
        self.latitude
    }
    pub fn clear_latitude(&mut self) {
        self.latitude = 0.;
    }

    // Param is passed by value, moved
    pub fn set_latitude(&mut self, v: f64) {
        self.latitude = v;
    }

    // int32 height = 3;


    pub fn get_height(&self) -> i32 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: i32) {
        self.height = v;
    }

    // int32 scale = 4;


    pub fn get_scale(&self) -> i32 {
        self.scale
    }
    pub fn clear_scale(&mut self) {
        self.scale = 0;
    }

    // Param is passed by value, moved
    pub fn set_scale(&mut self, v: i32) {
        self.scale = v;
    }
}

impl ::protobuf::Message for RoadPoint {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.longitude = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.latitude = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.height = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.scale = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.longitude != 0. {
            my_size += 9;
        }
        if self.latitude != 0. {
            my_size += 9;
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(3, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.scale != 0 {
            my_size += ::protobuf::rt::value_size(4, self.scale, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.longitude != 0. {
            os.write_double(1, self.longitude)?;
        }
        if self.latitude != 0. {
            os.write_double(2, self.latitude)?;
        }
        if self.height != 0 {
            os.write_int32(3, self.height)?;
        }
        if self.scale != 0 {
            os.write_int32(4, self.scale)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RoadPoint {
        RoadPoint::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "longitude",
                |m: &RoadPoint| { &m.longitude },
                |m: &mut RoadPoint| { &mut m.longitude },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "latitude",
                |m: &RoadPoint| { &m.latitude },
                |m: &mut RoadPoint| { &mut m.latitude },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "height",
                |m: &RoadPoint| { &m.height },
                |m: &mut RoadPoint| { &mut m.height },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "scale",
                |m: &RoadPoint| { &m.scale },
                |m: &mut RoadPoint| { &mut m.scale },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RoadPoint>(
                "RoadPoint",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RoadPoint {
        static instance: ::protobuf::rt::LazyV2<RoadPoint> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RoadPoint::new)
    }
}

impl ::protobuf::Clear for RoadPoint {
    fn clear(&mut self) {
        self.longitude = 0.;
        self.latitude = 0.;
        self.height = 0;
        self.scale = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RoadPoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RoadPoint {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WalkGuidePoint {
    // message fields
    pub guidePoint: ::protobuf::SingularPtrField<RoadPoint>,
    pub inLinkForm: u32,
    pub outLinkForm: u32,
    pub inLinkClass: u32,
    pub outLinkClass: u32,
    pub guideType: u32,
    pub outlinkID: u64,
    pub light: bool,
    pub trafficLight: bool,
    pub realNode: u32,
    pub realNodeGroup: u32,
    pub inLinkOrient: u32,
    pub outLinkOrient: u32,
    pub angle: u32,
    pub inLinkLen: u32,
    pub outLinkLen: u32,
    pub inLinkName: ::std::string::String,
    pub outLinkName: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WalkGuidePoint {
    fn default() -> &'a WalkGuidePoint {
        <WalkGuidePoint as ::protobuf::Message>::default_instance()
    }
}

impl WalkGuidePoint {
    pub fn new() -> WalkGuidePoint {
        ::std::default::Default::default()
    }

    // .cl_route.proto.RoadPoint guidePoint = 1;


    pub fn get_guidePoint(&self) -> &RoadPoint {
        self.guidePoint.as_ref().unwrap_or_else(|| <RoadPoint as ::protobuf::Message>::default_instance())
    }
    pub fn clear_guidePoint(&mut self) {
        self.guidePoint.clear();
    }

    pub fn has_guidePoint(&self) -> bool {
        self.guidePoint.is_some()
    }

    // Param is passed by value, moved
    pub fn set_guidePoint(&mut self, v: RoadPoint) {
        self.guidePoint = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_guidePoint(&mut self) -> &mut RoadPoint {
        if self.guidePoint.is_none() {
            self.guidePoint.set_default();
        }
        self.guidePoint.as_mut().unwrap()
    }

    // Take field
    pub fn take_guidePoint(&mut self) -> RoadPoint {
        self.guidePoint.take().unwrap_or_else(|| RoadPoint::new())
    }

    // uint32 inLinkForm = 2;


    pub fn get_inLinkForm(&self) -> u32 {
        self.inLinkForm
    }
    pub fn clear_inLinkForm(&mut self) {
        self.inLinkForm = 0;
    }

    // Param is passed by value, moved
    pub fn set_inLinkForm(&mut self, v: u32) {
        self.inLinkForm = v;
    }

    // uint32 outLinkForm = 3;


    pub fn get_outLinkForm(&self) -> u32 {
        self.outLinkForm
    }
    pub fn clear_outLinkForm(&mut self) {
        self.outLinkForm = 0;
    }

    // Param is passed by value, moved
    pub fn set_outLinkForm(&mut self, v: u32) {
        self.outLinkForm = v;
    }

    // uint32 inLinkClass = 4;


    pub fn get_inLinkClass(&self) -> u32 {
        self.inLinkClass
    }
    pub fn clear_inLinkClass(&mut self) {
        self.inLinkClass = 0;
    }

    // Param is passed by value, moved
    pub fn set_inLinkClass(&mut self, v: u32) {
        self.inLinkClass = v;
    }

    // uint32 outLinkClass = 5;


    pub fn get_outLinkClass(&self) -> u32 {
        self.outLinkClass
    }
    pub fn clear_outLinkClass(&mut self) {
        self.outLinkClass = 0;
    }

    // Param is passed by value, moved
    pub fn set_outLinkClass(&mut self, v: u32) {
        self.outLinkClass = v;
    }

    // uint32 guideType = 6;


    pub fn get_guideType(&self) -> u32 {
        self.guideType
    }
    pub fn clear_guideType(&mut self) {
        self.guideType = 0;
    }

    // Param is passed by value, moved
    pub fn set_guideType(&mut self, v: u32) {
        self.guideType = v;
    }

    // uint64 outlinkID = 7;


    pub fn get_outlinkID(&self) -> u64 {
        self.outlinkID
    }
    pub fn clear_outlinkID(&mut self) {
        self.outlinkID = 0;
    }

    // Param is passed by value, moved
    pub fn set_outlinkID(&mut self, v: u64) {
        self.outlinkID = v;
    }

    // bool light = 8;


    pub fn get_light(&self) -> bool {
        self.light
    }
    pub fn clear_light(&mut self) {
        self.light = false;
    }

    // Param is passed by value, moved
    pub fn set_light(&mut self, v: bool) {
        self.light = v;
    }

    // bool trafficLight = 9;


    pub fn get_trafficLight(&self) -> bool {
        self.trafficLight
    }
    pub fn clear_trafficLight(&mut self) {
        self.trafficLight = false;
    }

    // Param is passed by value, moved
    pub fn set_trafficLight(&mut self, v: bool) {
        self.trafficLight = v;
    }

    // uint32 realNode = 10;


    pub fn get_realNode(&self) -> u32 {
        self.realNode
    }
    pub fn clear_realNode(&mut self) {
        self.realNode = 0;
    }

    // Param is passed by value, moved
    pub fn set_realNode(&mut self, v: u32) {
        self.realNode = v;
    }

    // uint32 realNodeGroup = 11;


    pub fn get_realNodeGroup(&self) -> u32 {
        self.realNodeGroup
    }
    pub fn clear_realNodeGroup(&mut self) {
        self.realNodeGroup = 0;
    }

    // Param is passed by value, moved
    pub fn set_realNodeGroup(&mut self, v: u32) {
        self.realNodeGroup = v;
    }

    // uint32 inLinkOrient = 12;


    pub fn get_inLinkOrient(&self) -> u32 {
        self.inLinkOrient
    }
    pub fn clear_inLinkOrient(&mut self) {
        self.inLinkOrient = 0;
    }

    // Param is passed by value, moved
    pub fn set_inLinkOrient(&mut self, v: u32) {
        self.inLinkOrient = v;
    }

    // uint32 outLinkOrient = 13;


    pub fn get_outLinkOrient(&self) -> u32 {
        self.outLinkOrient
    }
    pub fn clear_outLinkOrient(&mut self) {
        self.outLinkOrient = 0;
    }

    // Param is passed by value, moved
    pub fn set_outLinkOrient(&mut self, v: u32) {
        self.outLinkOrient = v;
    }

    // uint32 angle = 14;


    pub fn get_angle(&self) -> u32 {
        self.angle
    }
    pub fn clear_angle(&mut self) {
        self.angle = 0;
    }

    // Param is passed by value, moved
    pub fn set_angle(&mut self, v: u32) {
        self.angle = v;
    }

    // uint32 inLinkLen = 15;


    pub fn get_inLinkLen(&self) -> u32 {
        self.inLinkLen
    }
    pub fn clear_inLinkLen(&mut self) {
        self.inLinkLen = 0;
    }

    // Param is passed by value, moved
    pub fn set_inLinkLen(&mut self, v: u32) {
        self.inLinkLen = v;
    }

    // uint32 outLinkLen = 16;


    pub fn get_outLinkLen(&self) -> u32 {
        self.outLinkLen
    }
    pub fn clear_outLinkLen(&mut self) {
        self.outLinkLen = 0;
    }

    // Param is passed by value, moved
    pub fn set_outLinkLen(&mut self, v: u32) {
        self.outLinkLen = v;
    }

    // string inLinkName = 17;


    pub fn get_inLinkName(&self) -> &str {
        &self.inLinkName
    }
    pub fn clear_inLinkName(&mut self) {
        self.inLinkName.clear();
    }

    // Param is passed by value, moved
    pub fn set_inLinkName(&mut self, v: ::std::string::String) {
        self.inLinkName = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_inLinkName(&mut self) -> &mut ::std::string::String {
        &mut self.inLinkName
    }

    // Take field
    pub fn take_inLinkName(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.inLinkName, ::std::string::String::new())
    }

    // string outLinkName = 18;


    pub fn get_outLinkName(&self) -> &str {
        &self.outLinkName
    }
    pub fn clear_outLinkName(&mut self) {
        self.outLinkName.clear();
    }

    // Param is passed by value, moved
    pub fn set_outLinkName(&mut self, v: ::std::string::String) {
        self.outLinkName = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_outLinkName(&mut self) -> &mut ::std::string::String {
        &mut self.outLinkName
    }

    // Take field
    pub fn take_outLinkName(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.outLinkName, ::std::string::String::new())
    }
}

impl ::protobuf::Message for WalkGuidePoint {
    fn is_initialized(&self) -> bool {
        for v in &self.guidePoint {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.guidePoint)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.inLinkForm = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.outLinkForm = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.inLinkClass = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.outLinkClass = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.guideType = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.outlinkID = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.light = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.trafficLight = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.realNode = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.realNodeGroup = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.inLinkOrient = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.outLinkOrient = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.angle = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.inLinkLen = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.outLinkLen = tmp;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.inLinkName)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.outLinkName)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.guidePoint.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.inLinkForm != 0 {
            my_size += ::protobuf::rt::value_size(2, self.inLinkForm, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.outLinkForm != 0 {
            my_size += ::protobuf::rt::value_size(3, self.outLinkForm, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.inLinkClass != 0 {
            my_size += ::protobuf::rt::value_size(4, self.inLinkClass, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.outLinkClass != 0 {
            my_size += ::protobuf::rt::value_size(5, self.outLinkClass, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.guideType != 0 {
            my_size += ::protobuf::rt::value_size(6, self.guideType, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.outlinkID != 0 {
            my_size += ::protobuf::rt::value_size(7, self.outlinkID, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.light != false {
            my_size += 2;
        }
        if self.trafficLight != false {
            my_size += 2;
        }
        if self.realNode != 0 {
            my_size += ::protobuf::rt::value_size(10, self.realNode, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.realNodeGroup != 0 {
            my_size += ::protobuf::rt::value_size(11, self.realNodeGroup, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.inLinkOrient != 0 {
            my_size += ::protobuf::rt::value_size(12, self.inLinkOrient, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.outLinkOrient != 0 {
            my_size += ::protobuf::rt::value_size(13, self.outLinkOrient, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.angle != 0 {
            my_size += ::protobuf::rt::value_size(14, self.angle, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.inLinkLen != 0 {
            my_size += ::protobuf::rt::value_size(15, self.inLinkLen, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.outLinkLen != 0 {
            my_size += ::protobuf::rt::value_size(16, self.outLinkLen, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.inLinkName.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.inLinkName);
        }
        if !self.outLinkName.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.outLinkName);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.guidePoint.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.inLinkForm != 0 {
            os.write_uint32(2, self.inLinkForm)?;
        }
        if self.outLinkForm != 0 {
            os.write_uint32(3, self.outLinkForm)?;
        }
        if self.inLinkClass != 0 {
            os.write_uint32(4, self.inLinkClass)?;
        }
        if self.outLinkClass != 0 {
            os.write_uint32(5, self.outLinkClass)?;
        }
        if self.guideType != 0 {
            os.write_uint32(6, self.guideType)?;
        }
        if self.outlinkID != 0 {
            os.write_uint64(7, self.outlinkID)?;
        }
        if self.light != false {
            os.write_bool(8, self.light)?;
        }
        if self.trafficLight != false {
            os.write_bool(9, self.trafficLight)?;
        }
        if self.realNode != 0 {
            os.write_uint32(10, self.realNode)?;
        }
        if self.realNodeGroup != 0 {
            os.write_uint32(11, self.realNodeGroup)?;
        }
        if self.inLinkOrient != 0 {
            os.write_uint32(12, self.inLinkOrient)?;
        }
        if self.outLinkOrient != 0 {
            os.write_uint32(13, self.outLinkOrient)?;
        }
        if self.angle != 0 {
            os.write_uint32(14, self.angle)?;
        }
        if self.inLinkLen != 0 {
            os.write_uint32(15, self.inLinkLen)?;
        }
        if self.outLinkLen != 0 {
            os.write_uint32(16, self.outLinkLen)?;
        }
        if !self.inLinkName.is_empty() {
            os.write_string(17, &self.inLinkName)?;
        }
        if !self.outLinkName.is_empty() {
            os.write_string(18, &self.outLinkName)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WalkGuidePoint {
        WalkGuidePoint::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RoadPoint>>(
                "guidePoint",
                |m: &WalkGuidePoint| { &m.guidePoint },
                |m: &mut WalkGuidePoint| { &mut m.guidePoint },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "inLinkForm",
                |m: &WalkGuidePoint| { &m.inLinkForm },
                |m: &mut WalkGuidePoint| { &mut m.inLinkForm },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "outLinkForm",
                |m: &WalkGuidePoint| { &m.outLinkForm },
                |m: &mut WalkGuidePoint| { &mut m.outLinkForm },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "inLinkClass",
                |m: &WalkGuidePoint| { &m.inLinkClass },
                |m: &mut WalkGuidePoint| { &mut m.inLinkClass },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "outLinkClass",
                |m: &WalkGuidePoint| { &m.outLinkClass },
                |m: &mut WalkGuidePoint| { &mut m.outLinkClass },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "guideType",
                |m: &WalkGuidePoint| { &m.guideType },
                |m: &mut WalkGuidePoint| { &mut m.guideType },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "outlinkID",
                |m: &WalkGuidePoint| { &m.outlinkID },
                |m: &mut WalkGuidePoint| { &mut m.outlinkID },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "light",
                |m: &WalkGuidePoint| { &m.light },
                |m: &mut WalkGuidePoint| { &mut m.light },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "trafficLight",
                |m: &WalkGuidePoint| { &m.trafficLight },
                |m: &mut WalkGuidePoint| { &mut m.trafficLight },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "realNode",
                |m: &WalkGuidePoint| { &m.realNode },
                |m: &mut WalkGuidePoint| { &mut m.realNode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "realNodeGroup",
                |m: &WalkGuidePoint| { &m.realNodeGroup },
                |m: &mut WalkGuidePoint| { &mut m.realNodeGroup },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "inLinkOrient",
                |m: &WalkGuidePoint| { &m.inLinkOrient },
                |m: &mut WalkGuidePoint| { &mut m.inLinkOrient },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "outLinkOrient",
                |m: &WalkGuidePoint| { &m.outLinkOrient },
                |m: &mut WalkGuidePoint| { &mut m.outLinkOrient },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "angle",
                |m: &WalkGuidePoint| { &m.angle },
                |m: &mut WalkGuidePoint| { &mut m.angle },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "inLinkLen",
                |m: &WalkGuidePoint| { &m.inLinkLen },
                |m: &mut WalkGuidePoint| { &mut m.inLinkLen },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "outLinkLen",
                |m: &WalkGuidePoint| { &m.outLinkLen },
                |m: &mut WalkGuidePoint| { &mut m.outLinkLen },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "inLinkName",
                |m: &WalkGuidePoint| { &m.inLinkName },
                |m: &mut WalkGuidePoint| { &mut m.inLinkName },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "outLinkName",
                |m: &WalkGuidePoint| { &m.outLinkName },
                |m: &mut WalkGuidePoint| { &mut m.outLinkName },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WalkGuidePoint>(
                "WalkGuidePoint",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WalkGuidePoint {
        static instance: ::protobuf::rt::LazyV2<WalkGuidePoint> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WalkGuidePoint::new)
    }
}

impl ::protobuf::Clear for WalkGuidePoint {
    fn clear(&mut self) {
        self.guidePoint.clear();
        self.inLinkForm = 0;
        self.outLinkForm = 0;
        self.inLinkClass = 0;
        self.outLinkClass = 0;
        self.guideType = 0;
        self.outlinkID = 0;
        self.light = false;
        self.trafficLight = false;
        self.realNode = 0;
        self.realNodeGroup = 0;
        self.inLinkOrient = 0;
        self.outLinkOrient = 0;
        self.angle = 0;
        self.inLinkLen = 0;
        self.outLinkLen = 0;
        self.inLinkName.clear();
        self.outLinkName.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WalkGuidePoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WalkGuidePoint {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RoadDescribe {
    // message fields
    pub routeID: u64,
    pub mode: u32,
    pub policy: u32,
    pub length: u32,
    pub time: u32,
    pub lightCount: u32,
    pub overPassCnt: u32,
    pub underPassCnt: u32,
    pub turningCnt: u32,
    pub routeStartPoint: ::protobuf::SingularPtrField<super::route_common::GeoPoint>,
    pub routeEndPoint: ::protobuf::SingularPtrField<super::route_common::GeoPoint>,
    pub fee: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RoadDescribe {
    fn default() -> &'a RoadDescribe {
        <RoadDescribe as ::protobuf::Message>::default_instance()
    }
}

impl RoadDescribe {
    pub fn new() -> RoadDescribe {
        ::std::default::Default::default()
    }

    // uint64 routeID = 1;


    pub fn get_routeID(&self) -> u64 {
        self.routeID
    }
    pub fn clear_routeID(&mut self) {
        self.routeID = 0;
    }

    // Param is passed by value, moved
    pub fn set_routeID(&mut self, v: u64) {
        self.routeID = v;
    }

    // uint32 mode = 2;


    pub fn get_mode(&self) -> u32 {
        self.mode
    }
    pub fn clear_mode(&mut self) {
        self.mode = 0;
    }

    // Param is passed by value, moved
    pub fn set_mode(&mut self, v: u32) {
        self.mode = v;
    }

    // uint32 policy = 3;


    pub fn get_policy(&self) -> u32 {
        self.policy
    }
    pub fn clear_policy(&mut self) {
        self.policy = 0;
    }

    // Param is passed by value, moved
    pub fn set_policy(&mut self, v: u32) {
        self.policy = v;
    }

    // uint32 length = 4;


    pub fn get_length(&self) -> u32 {
        self.length
    }
    pub fn clear_length(&mut self) {
        self.length = 0;
    }

    // Param is passed by value, moved
    pub fn set_length(&mut self, v: u32) {
        self.length = v;
    }

    // uint32 time = 5;


    pub fn get_time(&self) -> u32 {
        self.time
    }
    pub fn clear_time(&mut self) {
        self.time = 0;
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: u32) {
        self.time = v;
    }

    // uint32 lightCount = 6;


    pub fn get_lightCount(&self) -> u32 {
        self.lightCount
    }
    pub fn clear_lightCount(&mut self) {
        self.lightCount = 0;
    }

    // Param is passed by value, moved
    pub fn set_lightCount(&mut self, v: u32) {
        self.lightCount = v;
    }

    // uint32 overPassCnt = 7;


    pub fn get_overPassCnt(&self) -> u32 {
        self.overPassCnt
    }
    pub fn clear_overPassCnt(&mut self) {
        self.overPassCnt = 0;
    }

    // Param is passed by value, moved
    pub fn set_overPassCnt(&mut self, v: u32) {
        self.overPassCnt = v;
    }

    // uint32 underPassCnt = 8;


    pub fn get_underPassCnt(&self) -> u32 {
        self.underPassCnt
    }
    pub fn clear_underPassCnt(&mut self) {
        self.underPassCnt = 0;
    }

    // Param is passed by value, moved
    pub fn set_underPassCnt(&mut self, v: u32) {
        self.underPassCnt = v;
    }

    // uint32 turningCnt = 9;


    pub fn get_turningCnt(&self) -> u32 {
        self.turningCnt
    }
    pub fn clear_turningCnt(&mut self) {
        self.turningCnt = 0;
    }

    // Param is passed by value, moved
    pub fn set_turningCnt(&mut self, v: u32) {
        self.turningCnt = v;
    }

    // .cl_route.proto.GeoPoint routeStartPoint = 10;


    pub fn get_routeStartPoint(&self) -> &super::route_common::GeoPoint {
        self.routeStartPoint.as_ref().unwrap_or_else(|| <super::route_common::GeoPoint as ::protobuf::Message>::default_instance())
    }
    pub fn clear_routeStartPoint(&mut self) {
        self.routeStartPoint.clear();
    }

    pub fn has_routeStartPoint(&self) -> bool {
        self.routeStartPoint.is_some()
    }

    // Param is passed by value, moved
    pub fn set_routeStartPoint(&mut self, v: super::route_common::GeoPoint) {
        self.routeStartPoint = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_routeStartPoint(&mut self) -> &mut super::route_common::GeoPoint {
        if self.routeStartPoint.is_none() {
            self.routeStartPoint.set_default();
        }
        self.routeStartPoint.as_mut().unwrap()
    }

    // Take field
    pub fn take_routeStartPoint(&mut self) -> super::route_common::GeoPoint {
        self.routeStartPoint.take().unwrap_or_else(|| super::route_common::GeoPoint::new())
    }

    // .cl_route.proto.GeoPoint routeEndPoint = 11;


    pub fn get_routeEndPoint(&self) -> &super::route_common::GeoPoint {
        self.routeEndPoint.as_ref().unwrap_or_else(|| <super::route_common::GeoPoint as ::protobuf::Message>::default_instance())
    }
    pub fn clear_routeEndPoint(&mut self) {
        self.routeEndPoint.clear();
    }

    pub fn has_routeEndPoint(&self) -> bool {
        self.routeEndPoint.is_some()
    }

    // Param is passed by value, moved
    pub fn set_routeEndPoint(&mut self, v: super::route_common::GeoPoint) {
        self.routeEndPoint = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_routeEndPoint(&mut self) -> &mut super::route_common::GeoPoint {
        if self.routeEndPoint.is_none() {
            self.routeEndPoint.set_default();
        }
        self.routeEndPoint.as_mut().unwrap()
    }

    // Take field
    pub fn take_routeEndPoint(&mut self) -> super::route_common::GeoPoint {
        self.routeEndPoint.take().unwrap_or_else(|| super::route_common::GeoPoint::new())
    }

    // uint32 fee = 12;


    pub fn get_fee(&self) -> u32 {
        self.fee
    }
    pub fn clear_fee(&mut self) {
        self.fee = 0;
    }

    // Param is passed by value, moved
    pub fn set_fee(&mut self, v: u32) {
        self.fee = v;
    }
}

impl ::protobuf::Message for RoadDescribe {
    fn is_initialized(&self) -> bool {
        for v in &self.routeStartPoint {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.routeEndPoint {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.routeID = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.mode = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.policy = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.length = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.time = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.lightCount = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.overPassCnt = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.underPassCnt = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.turningCnt = tmp;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.routeStartPoint)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.routeEndPoint)?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.fee = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.routeID != 0 {
            my_size += ::protobuf::rt::value_size(1, self.routeID, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.mode != 0 {
            my_size += ::protobuf::rt::value_size(2, self.mode, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.policy != 0 {
            my_size += ::protobuf::rt::value_size(3, self.policy, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.length != 0 {
            my_size += ::protobuf::rt::value_size(4, self.length, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.time != 0 {
            my_size += ::protobuf::rt::value_size(5, self.time, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.lightCount != 0 {
            my_size += ::protobuf::rt::value_size(6, self.lightCount, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.overPassCnt != 0 {
            my_size += ::protobuf::rt::value_size(7, self.overPassCnt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.underPassCnt != 0 {
            my_size += ::protobuf::rt::value_size(8, self.underPassCnt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.turningCnt != 0 {
            my_size += ::protobuf::rt::value_size(9, self.turningCnt, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.routeStartPoint.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.routeEndPoint.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.fee != 0 {
            my_size += ::protobuf::rt::value_size(12, self.fee, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.routeID != 0 {
            os.write_uint64(1, self.routeID)?;
        }
        if self.mode != 0 {
            os.write_uint32(2, self.mode)?;
        }
        if self.policy != 0 {
            os.write_uint32(3, self.policy)?;
        }
        if self.length != 0 {
            os.write_uint32(4, self.length)?;
        }
        if self.time != 0 {
            os.write_uint32(5, self.time)?;
        }
        if self.lightCount != 0 {
            os.write_uint32(6, self.lightCount)?;
        }
        if self.overPassCnt != 0 {
            os.write_uint32(7, self.overPassCnt)?;
        }
        if self.underPassCnt != 0 {
            os.write_uint32(8, self.underPassCnt)?;
        }
        if self.turningCnt != 0 {
            os.write_uint32(9, self.turningCnt)?;
        }
        if let Some(ref v) = self.routeStartPoint.as_ref() {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.routeEndPoint.as_ref() {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.fee != 0 {
            os.write_uint32(12, self.fee)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RoadDescribe {
        RoadDescribe::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "routeID",
                |m: &RoadDescribe| { &m.routeID },
                |m: &mut RoadDescribe| { &mut m.routeID },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "mode",
                |m: &RoadDescribe| { &m.mode },
                |m: &mut RoadDescribe| { &mut m.mode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "policy",
                |m: &RoadDescribe| { &m.policy },
                |m: &mut RoadDescribe| { &mut m.policy },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "length",
                |m: &RoadDescribe| { &m.length },
                |m: &mut RoadDescribe| { &mut m.length },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "time",
                |m: &RoadDescribe| { &m.time },
                |m: &mut RoadDescribe| { &mut m.time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "lightCount",
                |m: &RoadDescribe| { &m.lightCount },
                |m: &mut RoadDescribe| { &mut m.lightCount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "overPassCnt",
                |m: &RoadDescribe| { &m.overPassCnt },
                |m: &mut RoadDescribe| { &mut m.overPassCnt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "underPassCnt",
                |m: &RoadDescribe| { &m.underPassCnt },
                |m: &mut RoadDescribe| { &mut m.underPassCnt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "turningCnt",
                |m: &RoadDescribe| { &m.turningCnt },
                |m: &mut RoadDescribe| { &mut m.turningCnt },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::route_common::GeoPoint>>(
                "routeStartPoint",
                |m: &RoadDescribe| { &m.routeStartPoint },
                |m: &mut RoadDescribe| { &mut m.routeStartPoint },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::route_common::GeoPoint>>(
                "routeEndPoint",
                |m: &RoadDescribe| { &m.routeEndPoint },
                |m: &mut RoadDescribe| { &mut m.routeEndPoint },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "fee",
                |m: &RoadDescribe| { &m.fee },
                |m: &mut RoadDescribe| { &mut m.fee },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RoadDescribe>(
                "RoadDescribe",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RoadDescribe {
        static instance: ::protobuf::rt::LazyV2<RoadDescribe> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RoadDescribe::new)
    }
}

impl ::protobuf::Clear for RoadDescribe {
    fn clear(&mut self) {
        self.routeID = 0;
        self.mode = 0;
        self.policy = 0;
        self.length = 0;
        self.time = 0;
        self.lightCount = 0;
        self.overPassCnt = 0;
        self.underPassCnt = 0;
        self.turningCnt = 0;
        self.routeStartPoint.clear();
        self.routeEndPoint.clear();
        self.fee = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RoadDescribe {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RoadDescribe {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Route {
    // message fields
    pub describe: ::protobuf::SingularPtrField<RoadDescribe>,
    pub roadPoints: ::protobuf::RepeatedField<RoadPoint>,
    pub roadForms: ::protobuf::RepeatedField<RoadForm>,
    pub guidePoints: ::protobuf::RepeatedField<WalkGuidePoint>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Route {
    fn default() -> &'a Route {
        <Route as ::protobuf::Message>::default_instance()
    }
}

impl Route {
    pub fn new() -> Route {
        ::std::default::Default::default()
    }

    // .cl_route.proto.RoadDescribe describe = 1;


    pub fn get_describe(&self) -> &RoadDescribe {
        self.describe.as_ref().unwrap_or_else(|| <RoadDescribe as ::protobuf::Message>::default_instance())
    }
    pub fn clear_describe(&mut self) {
        self.describe.clear();
    }

    pub fn has_describe(&self) -> bool {
        self.describe.is_some()
    }

    // Param is passed by value, moved
    pub fn set_describe(&mut self, v: RoadDescribe) {
        self.describe = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_describe(&mut self) -> &mut RoadDescribe {
        if self.describe.is_none() {
            self.describe.set_default();
        }
        self.describe.as_mut().unwrap()
    }

    // Take field
    pub fn take_describe(&mut self) -> RoadDescribe {
        self.describe.take().unwrap_or_else(|| RoadDescribe::new())
    }

    // repeated .cl_route.proto.RoadPoint roadPoints = 2;


    pub fn get_roadPoints(&self) -> &[RoadPoint] {
        &self.roadPoints
    }
    pub fn clear_roadPoints(&mut self) {
        self.roadPoints.clear();
    }

    // Param is passed by value, moved
    pub fn set_roadPoints(&mut self, v: ::protobuf::RepeatedField<RoadPoint>) {
        self.roadPoints = v;
    }

    // Mutable pointer to the field.
    pub fn mut_roadPoints(&mut self) -> &mut ::protobuf::RepeatedField<RoadPoint> {
        &mut self.roadPoints
    }

    // Take field
    pub fn take_roadPoints(&mut self) -> ::protobuf::RepeatedField<RoadPoint> {
        ::std::mem::replace(&mut self.roadPoints, ::protobuf::RepeatedField::new())
    }

    // repeated .cl_route.proto.RoadForm roadForms = 3;


    pub fn get_roadForms(&self) -> &[RoadForm] {
        &self.roadForms
    }
    pub fn clear_roadForms(&mut self) {
        self.roadForms.clear();
    }

    // Param is passed by value, moved
    pub fn set_roadForms(&mut self, v: ::protobuf::RepeatedField<RoadForm>) {
        self.roadForms = v;
    }

    // Mutable pointer to the field.
    pub fn mut_roadForms(&mut self) -> &mut ::protobuf::RepeatedField<RoadForm> {
        &mut self.roadForms
    }

    // Take field
    pub fn take_roadForms(&mut self) -> ::protobuf::RepeatedField<RoadForm> {
        ::std::mem::replace(&mut self.roadForms, ::protobuf::RepeatedField::new())
    }

    // repeated .cl_route.proto.WalkGuidePoint guidePoints = 4;


    pub fn get_guidePoints(&self) -> &[WalkGuidePoint] {
        &self.guidePoints
    }
    pub fn clear_guidePoints(&mut self) {
        self.guidePoints.clear();
    }

    // Param is passed by value, moved
    pub fn set_guidePoints(&mut self, v: ::protobuf::RepeatedField<WalkGuidePoint>) {
        self.guidePoints = v;
    }

    // Mutable pointer to the field.
    pub fn mut_guidePoints(&mut self) -> &mut ::protobuf::RepeatedField<WalkGuidePoint> {
        &mut self.guidePoints
    }

    // Take field
    pub fn take_guidePoints(&mut self) -> ::protobuf::RepeatedField<WalkGuidePoint> {
        ::std::mem::replace(&mut self.guidePoints, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Route {
    fn is_initialized(&self) -> bool {
        for v in &self.describe {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.roadPoints {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.roadForms {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.guidePoints {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.describe)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.roadPoints)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.roadForms)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.guidePoints)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.describe.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.roadPoints {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.roadForms {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.guidePoints {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.describe.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.roadPoints {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.roadForms {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.guidePoints {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Route {
        Route::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RoadDescribe>>(
                "describe",
                |m: &Route| { &m.describe },
                |m: &mut Route| { &mut m.describe },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RoadPoint>>(
                "roadPoints",
                |m: &Route| { &m.roadPoints },
                |m: &mut Route| { &mut m.roadPoints },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RoadForm>>(
                "roadForms",
                |m: &Route| { &m.roadForms },
                |m: &mut Route| { &mut m.roadForms },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<WalkGuidePoint>>(
                "guidePoints",
                |m: &Route| { &m.guidePoints },
                |m: &mut Route| { &mut m.guidePoints },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Route>(
                "Route",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Route {
        static instance: ::protobuf::rt::LazyV2<Route> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Route::new)
    }
}

impl ::protobuf::Clear for Route {
    fn clear(&mut self) {
        self.describe.clear();
        self.roadPoints.clear();
        self.roadForms.clear();
        self.guidePoints.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Route {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Route {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RouteResult {
    // message fields
    pub status: u32,
    pub version: u32,
    pub routes: ::protobuf::RepeatedField<Route>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RouteResult {
    fn default() -> &'a RouteResult {
        <RouteResult as ::protobuf::Message>::default_instance()
    }
}

impl RouteResult {
    pub fn new() -> RouteResult {
        ::std::default::Default::default()
    }

    // uint32 status = 1;


    pub fn get_status(&self) -> u32 {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = 0;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: u32) {
        self.status = v;
    }

    // uint32 version = 2;


    pub fn get_version(&self) -> u32 {
        self.version
    }
    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u32) {
        self.version = v;
    }

    // repeated .cl_route.proto.Route routes = 3;


    pub fn get_routes(&self) -> &[Route] {
        &self.routes
    }
    pub fn clear_routes(&mut self) {
        self.routes.clear();
    }

    // Param is passed by value, moved
    pub fn set_routes(&mut self, v: ::protobuf::RepeatedField<Route>) {
        self.routes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_routes(&mut self) -> &mut ::protobuf::RepeatedField<Route> {
        &mut self.routes
    }

    // Take field
    pub fn take_routes(&mut self) -> ::protobuf::RepeatedField<Route> {
        ::std::mem::replace(&mut self.routes, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for RouteResult {
    fn is_initialized(&self) -> bool {
        for v in &self.routes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.status = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.version = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.routes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != 0 {
            my_size += ::protobuf::rt::value_size(1, self.status, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(2, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.routes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != 0 {
            os.write_uint32(1, self.status)?;
        }
        if self.version != 0 {
            os.write_uint32(2, self.version)?;
        }
        for v in &self.routes {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RouteResult {
        RouteResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "status",
                |m: &RouteResult| { &m.status },
                |m: &mut RouteResult| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "version",
                |m: &RouteResult| { &m.version },
                |m: &mut RouteResult| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Route>>(
                "routes",
                |m: &RouteResult| { &m.routes },
                |m: &mut RouteResult| { &mut m.routes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RouteResult>(
                "RouteResult",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RouteResult {
        static instance: ::protobuf::rt::LazyV2<RouteResult> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RouteResult::new)
    }
}

impl ::protobuf::Clear for RouteResult {
    fn clear(&mut self) {
        self.status = 0;
        self.version = 0;
        self.routes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RouteResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RouteResult {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12route_result.proto\x12\x0ecl_route.proto\x1a\x12route_common.proto\
    \"\x86\x01\n\x08RoadForm\x12\x1c\n\tfromIndex\x18\x01\x20\x01(\rR\tfromI\
    ndex\x12\x18\n\x07toIndex\x18\x02\x20\x01(\rR\x07toIndex\x12\x12\n\x04fo\
    rm\x18\x03\x20\x01(\rR\x04form\x12\x18\n\x07modelID\x18\x04\x20\x01(\rR\
    \x07modelID\x12\x14\n\x05floor\x18\x05\x20\x01(\x05R\x05floor\"s\n\tRoad\
    Point\x12\x1c\n\tlongitude\x18\x01\x20\x01(\x01R\tlongitude\x12\x1a\n\
    \x08latitude\x18\x02\x20\x01(\x01R\x08latitude\x12\x16\n\x06height\x18\
    \x03\x20\x01(\x05R\x06height\x12\x14\n\x05scale\x18\x04\x20\x01(\x05R\
    \x05scale\"\xeb\x04\n\x0eWalkGuidePoint\x129\n\nguidePoint\x18\x01\x20\
    \x01(\x0b2\x19.cl_route.proto.RoadPointR\nguidePoint\x12\x1e\n\ninLinkFo\
    rm\x18\x02\x20\x01(\rR\ninLinkForm\x12\x20\n\x0boutLinkForm\x18\x03\x20\
    \x01(\rR\x0boutLinkForm\x12\x20\n\x0binLinkClass\x18\x04\x20\x01(\rR\x0b\
    inLinkClass\x12\"\n\x0coutLinkClass\x18\x05\x20\x01(\rR\x0coutLinkClass\
    \x12\x1c\n\tguideType\x18\x06\x20\x01(\rR\tguideType\x12\x1c\n\toutlinkI\
    D\x18\x07\x20\x01(\x04R\toutlinkID\x12\x14\n\x05light\x18\x08\x20\x01(\
    \x08R\x05light\x12\"\n\x0ctrafficLight\x18\t\x20\x01(\x08R\x0ctrafficLig\
    ht\x12\x1a\n\x08realNode\x18\n\x20\x01(\rR\x08realNode\x12$\n\rrealNodeG\
    roup\x18\x0b\x20\x01(\rR\rrealNodeGroup\x12\"\n\x0cinLinkOrient\x18\x0c\
    \x20\x01(\rR\x0cinLinkOrient\x12$\n\routLinkOrient\x18\r\x20\x01(\rR\rou\
    tLinkOrient\x12\x14\n\x05angle\x18\x0e\x20\x01(\rR\x05angle\x12\x1c\n\ti\
    nLinkLen\x18\x0f\x20\x01(\rR\tinLinkLen\x12\x1e\n\noutLinkLen\x18\x10\
    \x20\x01(\rR\noutLinkLen\x12\x1e\n\ninLinkName\x18\x11\x20\x01(\tR\ninLi\
    nkName\x12\x20\n\x0boutLinkName\x18\x12\x20\x01(\tR\x0boutLinkName\"\x9c\
    \x03\n\x0cRoadDescribe\x12\x18\n\x07routeID\x18\x01\x20\x01(\x04R\x07rou\
    teID\x12\x12\n\x04mode\x18\x02\x20\x01(\rR\x04mode\x12\x16\n\x06policy\
    \x18\x03\x20\x01(\rR\x06policy\x12\x16\n\x06length\x18\x04\x20\x01(\rR\
    \x06length\x12\x12\n\x04time\x18\x05\x20\x01(\rR\x04time\x12\x1e\n\nligh\
    tCount\x18\x06\x20\x01(\rR\nlightCount\x12\x20\n\x0boverPassCnt\x18\x07\
    \x20\x01(\rR\x0boverPassCnt\x12\"\n\x0cunderPassCnt\x18\x08\x20\x01(\rR\
    \x0cunderPassCnt\x12\x1e\n\nturningCnt\x18\t\x20\x01(\rR\nturningCnt\x12\
    B\n\x0frouteStartPoint\x18\n\x20\x01(\x0b2\x18.cl_route.proto.GeoPointR\
    \x0frouteStartPoint\x12>\n\rrouteEndPoint\x18\x0b\x20\x01(\x0b2\x18.cl_r\
    oute.proto.GeoPointR\rrouteEndPoint\x12\x10\n\x03fee\x18\x0c\x20\x01(\rR\
    \x03fee\"\xf6\x01\n\x05Route\x128\n\x08describe\x18\x01\x20\x01(\x0b2\
    \x1c.cl_route.proto.RoadDescribeR\x08describe\x129\n\nroadPoints\x18\x02\
    \x20\x03(\x0b2\x19.cl_route.proto.RoadPointR\nroadPoints\x126\n\troadFor\
    ms\x18\x03\x20\x03(\x0b2\x18.cl_route.proto.RoadFormR\troadForms\x12@\n\
    \x0bguidePoints\x18\x04\x20\x03(\x0b2\x1e.cl_route.proto.WalkGuidePointR\
    \x0bguidePoints\"n\n\x0bRouteResult\x12\x16\n\x06status\x18\x01\x20\x01(\
    \rR\x06status\x12\x18\n\x07version\x18\x02\x20\x01(\rR\x07version\x12-\n\
    \x06routes\x18\x03\x20\x03(\x0b2\x15.cl_route.proto.RouteR\x06routesB1\n\
    \x1bcom.citylife.route.protocolZ\x12../service;serviceb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
