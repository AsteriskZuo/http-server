// This file is generated by rust-protobuf 2.25.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `route_common.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_1;

#[derive(PartialEq,Clone,Default)]
pub struct GeoPoint {
    // message fields
    pub longitude: f64,
    pub latitude: f64,
    pub height: i32,
    pub modelID: u32,
    pub floor: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GeoPoint {
    fn default() -> &'a GeoPoint {
        <GeoPoint as ::protobuf::Message>::default_instance()
    }
}

impl GeoPoint {
    pub fn new() -> GeoPoint {
        ::std::default::Default::default()
    }

    // double longitude = 1;


    pub fn get_longitude(&self) -> f64 {
        self.longitude
    }
    pub fn clear_longitude(&mut self) {
        self.longitude = 0.;
    }

    // Param is passed by value, moved
    pub fn set_longitude(&mut self, v: f64) {
        self.longitude = v;
    }

    // double latitude = 2;


    pub fn get_latitude(&self) -> f64 {
        self.latitude
    }
    pub fn clear_latitude(&mut self) {
        self.latitude = 0.;
    }

    // Param is passed by value, moved
    pub fn set_latitude(&mut self, v: f64) {
        self.latitude = v;
    }

    // int32 height = 3;


    pub fn get_height(&self) -> i32 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: i32) {
        self.height = v;
    }

    // uint32 modelID = 4;


    pub fn get_modelID(&self) -> u32 {
        self.modelID
    }
    pub fn clear_modelID(&mut self) {
        self.modelID = 0;
    }

    // Param is passed by value, moved
    pub fn set_modelID(&mut self, v: u32) {
        self.modelID = v;
    }

    // int32 floor = 5;


    pub fn get_floor(&self) -> i32 {
        self.floor
    }
    pub fn clear_floor(&mut self) {
        self.floor = 0;
    }

    // Param is passed by value, moved
    pub fn set_floor(&mut self, v: i32) {
        self.floor = v;
    }
}

impl ::protobuf::Message for GeoPoint {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.longitude = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.latitude = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.height = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.modelID = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.floor = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.longitude != 0. {
            my_size += 9;
        }
        if self.latitude != 0. {
            my_size += 9;
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(3, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.modelID != 0 {
            my_size += ::protobuf::rt::value_size(4, self.modelID, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.floor != 0 {
            my_size += ::protobuf::rt::value_size(5, self.floor, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.longitude != 0. {
            os.write_double(1, self.longitude)?;
        }
        if self.latitude != 0. {
            os.write_double(2, self.latitude)?;
        }
        if self.height != 0 {
            os.write_int32(3, self.height)?;
        }
        if self.modelID != 0 {
            os.write_uint32(4, self.modelID)?;
        }
        if self.floor != 0 {
            os.write_int32(5, self.floor)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GeoPoint {
        GeoPoint::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "longitude",
                |m: &GeoPoint| { &m.longitude },
                |m: &mut GeoPoint| { &mut m.longitude },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "latitude",
                |m: &GeoPoint| { &m.latitude },
                |m: &mut GeoPoint| { &mut m.latitude },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "height",
                |m: &GeoPoint| { &m.height },
                |m: &mut GeoPoint| { &mut m.height },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "modelID",
                |m: &GeoPoint| { &m.modelID },
                |m: &mut GeoPoint| { &mut m.modelID },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "floor",
                |m: &GeoPoint| { &m.floor },
                |m: &mut GeoPoint| { &mut m.floor },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GeoPoint>(
                "GeoPoint",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GeoPoint {
        static instance: ::protobuf::rt::LazyV2<GeoPoint> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GeoPoint::new)
    }
}

impl ::protobuf::Clear for GeoPoint {
    fn clear(&mut self) {
        self.longitude = 0.;
        self.latitude = 0.;
        self.height = 0;
        self.modelID = 0;
        self.floor = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GeoPoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GeoPoint {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GeoArea {
    // message fields
    pub minx: f64,
    pub miny: f64,
    pub maxx: f64,
    pub maxy: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GeoArea {
    fn default() -> &'a GeoArea {
        <GeoArea as ::protobuf::Message>::default_instance()
    }
}

impl GeoArea {
    pub fn new() -> GeoArea {
        ::std::default::Default::default()
    }

    // double minx = 1;


    pub fn get_minx(&self) -> f64 {
        self.minx
    }
    pub fn clear_minx(&mut self) {
        self.minx = 0.;
    }

    // Param is passed by value, moved
    pub fn set_minx(&mut self, v: f64) {
        self.minx = v;
    }

    // double miny = 2;


    pub fn get_miny(&self) -> f64 {
        self.miny
    }
    pub fn clear_miny(&mut self) {
        self.miny = 0.;
    }

    // Param is passed by value, moved
    pub fn set_miny(&mut self, v: f64) {
        self.miny = v;
    }

    // double maxx = 3;


    pub fn get_maxx(&self) -> f64 {
        self.maxx
    }
    pub fn clear_maxx(&mut self) {
        self.maxx = 0.;
    }

    // Param is passed by value, moved
    pub fn set_maxx(&mut self, v: f64) {
        self.maxx = v;
    }

    // double maxy = 4;


    pub fn get_maxy(&self) -> f64 {
        self.maxy
    }
    pub fn clear_maxy(&mut self) {
        self.maxy = 0.;
    }

    // Param is passed by value, moved
    pub fn set_maxy(&mut self, v: f64) {
        self.maxy = v;
    }
}

impl ::protobuf::Message for GeoArea {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.minx = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.miny = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.maxx = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.maxy = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.minx != 0. {
            my_size += 9;
        }
        if self.miny != 0. {
            my_size += 9;
        }
        if self.maxx != 0. {
            my_size += 9;
        }
        if self.maxy != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.minx != 0. {
            os.write_double(1, self.minx)?;
        }
        if self.miny != 0. {
            os.write_double(2, self.miny)?;
        }
        if self.maxx != 0. {
            os.write_double(3, self.maxx)?;
        }
        if self.maxy != 0. {
            os.write_double(4, self.maxy)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GeoArea {
        GeoArea::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "minx",
                |m: &GeoArea| { &m.minx },
                |m: &mut GeoArea| { &mut m.minx },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "miny",
                |m: &GeoArea| { &m.miny },
                |m: &mut GeoArea| { &mut m.miny },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "maxx",
                |m: &GeoArea| { &m.maxx },
                |m: &mut GeoArea| { &mut m.maxx },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "maxy",
                |m: &GeoArea| { &m.maxy },
                |m: &mut GeoArea| { &mut m.maxy },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GeoArea>(
                "GeoArea",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GeoArea {
        static instance: ::protobuf::rt::LazyV2<GeoArea> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GeoArea::new)
    }
}

impl ::protobuf::Clear for GeoArea {
    fn clear(&mut self) {
        self.minx = 0.;
        self.miny = 0.;
        self.maxx = 0.;
        self.maxy = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GeoArea {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GeoArea {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12route_common.proto\x12\x0ecl_route.proto\"\x8c\x01\n\x08GeoPoint\
    \x12\x1c\n\tlongitude\x18\x01\x20\x01(\x01R\tlongitude\x12\x1a\n\x08lati\
    tude\x18\x02\x20\x01(\x01R\x08latitude\x12\x16\n\x06height\x18\x03\x20\
    \x01(\x05R\x06height\x12\x18\n\x07modelID\x18\x04\x20\x01(\rR\x07modelID\
    \x12\x14\n\x05floor\x18\x05\x20\x01(\x05R\x05floor\"Y\n\x07GeoArea\x12\
    \x12\n\x04minx\x18\x01\x20\x01(\x01R\x04minx\x12\x12\n\x04miny\x18\x02\
    \x20\x01(\x01R\x04miny\x12\x12\n\x04maxx\x18\x03\x20\x01(\x01R\x04maxx\
    \x12\x12\n\x04maxy\x18\x04\x20\x01(\x01R\x04maxyB1\n\x1bcom.citylife.rou\
    te.protocolZ\x12../service;serviceb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
