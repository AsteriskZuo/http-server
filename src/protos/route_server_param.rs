// This file is generated by rust-protobuf 2.25.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `route_server_param.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_1;

#[derive(PartialEq,Clone,Default)]
pub struct PoiInfo {
    // message fields
    pub poiID: u64,
    pub poiName: ::std::string::String,
    pub roadID: u64,
    pub entry: ::protobuf::SingularPtrField<super::route_common::GeoPoint>,
    pub modelID: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PoiInfo {
    fn default() -> &'a PoiInfo {
        <PoiInfo as ::protobuf::Message>::default_instance()
    }
}

impl PoiInfo {
    pub fn new() -> PoiInfo {
        ::std::default::Default::default()
    }

    // uint64 poiID = 1;


    pub fn get_poiID(&self) -> u64 {
        self.poiID
    }
    pub fn clear_poiID(&mut self) {
        self.poiID = 0;
    }

    // Param is passed by value, moved
    pub fn set_poiID(&mut self, v: u64) {
        self.poiID = v;
    }

    // string poiName = 2;


    pub fn get_poiName(&self) -> &str {
        &self.poiName
    }
    pub fn clear_poiName(&mut self) {
        self.poiName.clear();
    }

    // Param is passed by value, moved
    pub fn set_poiName(&mut self, v: ::std::string::String) {
        self.poiName = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_poiName(&mut self) -> &mut ::std::string::String {
        &mut self.poiName
    }

    // Take field
    pub fn take_poiName(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.poiName, ::std::string::String::new())
    }

    // uint64 roadID = 3;


    pub fn get_roadID(&self) -> u64 {
        self.roadID
    }
    pub fn clear_roadID(&mut self) {
        self.roadID = 0;
    }

    // Param is passed by value, moved
    pub fn set_roadID(&mut self, v: u64) {
        self.roadID = v;
    }

    // .cl_route.proto.GeoPoint entry = 4;


    pub fn get_entry(&self) -> &super::route_common::GeoPoint {
        self.entry.as_ref().unwrap_or_else(|| <super::route_common::GeoPoint as ::protobuf::Message>::default_instance())
    }
    pub fn clear_entry(&mut self) {
        self.entry.clear();
    }

    pub fn has_entry(&self) -> bool {
        self.entry.is_some()
    }

    // Param is passed by value, moved
    pub fn set_entry(&mut self, v: super::route_common::GeoPoint) {
        self.entry = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_entry(&mut self) -> &mut super::route_common::GeoPoint {
        if self.entry.is_none() {
            self.entry.set_default();
        }
        self.entry.as_mut().unwrap()
    }

    // Take field
    pub fn take_entry(&mut self) -> super::route_common::GeoPoint {
        self.entry.take().unwrap_or_else(|| super::route_common::GeoPoint::new())
    }

    // uint64 modelID = 5;


    pub fn get_modelID(&self) -> u64 {
        self.modelID
    }
    pub fn clear_modelID(&mut self) {
        self.modelID = 0;
    }

    // Param is passed by value, moved
    pub fn set_modelID(&mut self, v: u64) {
        self.modelID = v;
    }
}

impl ::protobuf::Message for PoiInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.entry {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.poiID = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.poiName)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.roadID = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.entry)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.modelID = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.poiID != 0 {
            my_size += ::protobuf::rt::value_size(1, self.poiID, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.poiName.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.poiName);
        }
        if self.roadID != 0 {
            my_size += ::protobuf::rt::value_size(3, self.roadID, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.entry.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.modelID != 0 {
            my_size += ::protobuf::rt::value_size(5, self.modelID, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.poiID != 0 {
            os.write_uint64(1, self.poiID)?;
        }
        if !self.poiName.is_empty() {
            os.write_string(2, &self.poiName)?;
        }
        if self.roadID != 0 {
            os.write_uint64(3, self.roadID)?;
        }
        if let Some(ref v) = self.entry.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.modelID != 0 {
            os.write_uint64(5, self.modelID)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PoiInfo {
        PoiInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "poiID",
                |m: &PoiInfo| { &m.poiID },
                |m: &mut PoiInfo| { &mut m.poiID },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "poiName",
                |m: &PoiInfo| { &m.poiName },
                |m: &mut PoiInfo| { &mut m.poiName },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "roadID",
                |m: &PoiInfo| { &m.roadID },
                |m: &mut PoiInfo| { &mut m.roadID },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::route_common::GeoPoint>>(
                "entry",
                |m: &PoiInfo| { &m.entry },
                |m: &mut PoiInfo| { &mut m.entry },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "modelID",
                |m: &PoiInfo| { &m.modelID },
                |m: &mut PoiInfo| { &mut m.modelID },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PoiInfo>(
                "PoiInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PoiInfo {
        static instance: ::protobuf::rt::LazyV2<PoiInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PoiInfo::new)
    }
}

impl ::protobuf::Clear for PoiInfo {
    fn clear(&mut self) {
        self.poiID = 0;
        self.poiName.clear();
        self.roadID = 0;
        self.entry.clear();
        self.modelID = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PoiInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PoiInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RoutePlanServerParameter {
    // message fields
    pub version: u32,
    pub mode: u32,
    pub policy: u32,
    pub realTimeTraffic: bool,
    pub middlePoint: ::protobuf::RepeatedField<super::route_common::GeoPoint>,
    pub middlePoiID: ::protobuf::RepeatedField<::std::string::String>,
    pub responseMode: u32,
    pub shapeOptimization: u32,
    pub routeIDInNavi: ::std::string::String,
    pub roadFormForStartPoint: u32,
    pub isYaw: u32,
    pub avoidAreas: ::protobuf::RepeatedField<super::route_common::GeoArea>,
    pub avoidRoadIDs: ::protobuf::RepeatedField<::std::string::String>,
    // message oneof groups
    pub start: ::std::option::Option<RoutePlanServerParameter_oneof_start>,
    pub end: ::std::option::Option<RoutePlanServerParameter_oneof_end>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RoutePlanServerParameter {
    fn default() -> &'a RoutePlanServerParameter {
        <RoutePlanServerParameter as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum RoutePlanServerParameter_oneof_start {
    startPoint(super::route_common::GeoPoint),
    startPoi(PoiInfo),
}

#[derive(Clone,PartialEq,Debug)]
pub enum RoutePlanServerParameter_oneof_end {
    endPoint(super::route_common::GeoPoint),
    endPoi(PoiInfo),
}

impl RoutePlanServerParameter {
    pub fn new() -> RoutePlanServerParameter {
        ::std::default::Default::default()
    }

    // uint32 version = 1;


    pub fn get_version(&self) -> u32 {
        self.version
    }
    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u32) {
        self.version = v;
    }

    // uint32 mode = 2;


    pub fn get_mode(&self) -> u32 {
        self.mode
    }
    pub fn clear_mode(&mut self) {
        self.mode = 0;
    }

    // Param is passed by value, moved
    pub fn set_mode(&mut self, v: u32) {
        self.mode = v;
    }

    // uint32 policy = 3;


    pub fn get_policy(&self) -> u32 {
        self.policy
    }
    pub fn clear_policy(&mut self) {
        self.policy = 0;
    }

    // Param is passed by value, moved
    pub fn set_policy(&mut self, v: u32) {
        self.policy = v;
    }

    // bool realTimeTraffic = 4;


    pub fn get_realTimeTraffic(&self) -> bool {
        self.realTimeTraffic
    }
    pub fn clear_realTimeTraffic(&mut self) {
        self.realTimeTraffic = false;
    }

    // Param is passed by value, moved
    pub fn set_realTimeTraffic(&mut self, v: bool) {
        self.realTimeTraffic = v;
    }

    // .cl_route.proto.GeoPoint startPoint = 5;


    pub fn get_startPoint(&self) -> &super::route_common::GeoPoint {
        match self.start {
            ::std::option::Option::Some(RoutePlanServerParameter_oneof_start::startPoint(ref v)) => v,
            _ => <super::route_common::GeoPoint as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_startPoint(&mut self) {
        self.start = ::std::option::Option::None;
    }

    pub fn has_startPoint(&self) -> bool {
        match self.start {
            ::std::option::Option::Some(RoutePlanServerParameter_oneof_start::startPoint(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_startPoint(&mut self, v: super::route_common::GeoPoint) {
        self.start = ::std::option::Option::Some(RoutePlanServerParameter_oneof_start::startPoint(v))
    }

    // Mutable pointer to the field.
    pub fn mut_startPoint(&mut self) -> &mut super::route_common::GeoPoint {
        if let ::std::option::Option::Some(RoutePlanServerParameter_oneof_start::startPoint(_)) = self.start {
        } else {
            self.start = ::std::option::Option::Some(RoutePlanServerParameter_oneof_start::startPoint(super::route_common::GeoPoint::new()));
        }
        match self.start {
            ::std::option::Option::Some(RoutePlanServerParameter_oneof_start::startPoint(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_startPoint(&mut self) -> super::route_common::GeoPoint {
        if self.has_startPoint() {
            match self.start.take() {
                ::std::option::Option::Some(RoutePlanServerParameter_oneof_start::startPoint(v)) => v,
                _ => panic!(),
            }
        } else {
            super::route_common::GeoPoint::new()
        }
    }

    // .cl_route.proto.PoiInfo startPoi = 6;


    pub fn get_startPoi(&self) -> &PoiInfo {
        match self.start {
            ::std::option::Option::Some(RoutePlanServerParameter_oneof_start::startPoi(ref v)) => v,
            _ => <PoiInfo as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_startPoi(&mut self) {
        self.start = ::std::option::Option::None;
    }

    pub fn has_startPoi(&self) -> bool {
        match self.start {
            ::std::option::Option::Some(RoutePlanServerParameter_oneof_start::startPoi(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_startPoi(&mut self, v: PoiInfo) {
        self.start = ::std::option::Option::Some(RoutePlanServerParameter_oneof_start::startPoi(v))
    }

    // Mutable pointer to the field.
    pub fn mut_startPoi(&mut self) -> &mut PoiInfo {
        if let ::std::option::Option::Some(RoutePlanServerParameter_oneof_start::startPoi(_)) = self.start {
        } else {
            self.start = ::std::option::Option::Some(RoutePlanServerParameter_oneof_start::startPoi(PoiInfo::new()));
        }
        match self.start {
            ::std::option::Option::Some(RoutePlanServerParameter_oneof_start::startPoi(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_startPoi(&mut self) -> PoiInfo {
        if self.has_startPoi() {
            match self.start.take() {
                ::std::option::Option::Some(RoutePlanServerParameter_oneof_start::startPoi(v)) => v,
                _ => panic!(),
            }
        } else {
            PoiInfo::new()
        }
    }

    // .cl_route.proto.GeoPoint endPoint = 7;


    pub fn get_endPoint(&self) -> &super::route_common::GeoPoint {
        match self.end {
            ::std::option::Option::Some(RoutePlanServerParameter_oneof_end::endPoint(ref v)) => v,
            _ => <super::route_common::GeoPoint as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_endPoint(&mut self) {
        self.end = ::std::option::Option::None;
    }

    pub fn has_endPoint(&self) -> bool {
        match self.end {
            ::std::option::Option::Some(RoutePlanServerParameter_oneof_end::endPoint(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_endPoint(&mut self, v: super::route_common::GeoPoint) {
        self.end = ::std::option::Option::Some(RoutePlanServerParameter_oneof_end::endPoint(v))
    }

    // Mutable pointer to the field.
    pub fn mut_endPoint(&mut self) -> &mut super::route_common::GeoPoint {
        if let ::std::option::Option::Some(RoutePlanServerParameter_oneof_end::endPoint(_)) = self.end {
        } else {
            self.end = ::std::option::Option::Some(RoutePlanServerParameter_oneof_end::endPoint(super::route_common::GeoPoint::new()));
        }
        match self.end {
            ::std::option::Option::Some(RoutePlanServerParameter_oneof_end::endPoint(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_endPoint(&mut self) -> super::route_common::GeoPoint {
        if self.has_endPoint() {
            match self.end.take() {
                ::std::option::Option::Some(RoutePlanServerParameter_oneof_end::endPoint(v)) => v,
                _ => panic!(),
            }
        } else {
            super::route_common::GeoPoint::new()
        }
    }

    // .cl_route.proto.PoiInfo endPoi = 8;


    pub fn get_endPoi(&self) -> &PoiInfo {
        match self.end {
            ::std::option::Option::Some(RoutePlanServerParameter_oneof_end::endPoi(ref v)) => v,
            _ => <PoiInfo as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_endPoi(&mut self) {
        self.end = ::std::option::Option::None;
    }

    pub fn has_endPoi(&self) -> bool {
        match self.end {
            ::std::option::Option::Some(RoutePlanServerParameter_oneof_end::endPoi(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_endPoi(&mut self, v: PoiInfo) {
        self.end = ::std::option::Option::Some(RoutePlanServerParameter_oneof_end::endPoi(v))
    }

    // Mutable pointer to the field.
    pub fn mut_endPoi(&mut self) -> &mut PoiInfo {
        if let ::std::option::Option::Some(RoutePlanServerParameter_oneof_end::endPoi(_)) = self.end {
        } else {
            self.end = ::std::option::Option::Some(RoutePlanServerParameter_oneof_end::endPoi(PoiInfo::new()));
        }
        match self.end {
            ::std::option::Option::Some(RoutePlanServerParameter_oneof_end::endPoi(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_endPoi(&mut self) -> PoiInfo {
        if self.has_endPoi() {
            match self.end.take() {
                ::std::option::Option::Some(RoutePlanServerParameter_oneof_end::endPoi(v)) => v,
                _ => panic!(),
            }
        } else {
            PoiInfo::new()
        }
    }

    // repeated .cl_route.proto.GeoPoint middlePoint = 9;


    pub fn get_middlePoint(&self) -> &[super::route_common::GeoPoint] {
        &self.middlePoint
    }
    pub fn clear_middlePoint(&mut self) {
        self.middlePoint.clear();
    }

    // Param is passed by value, moved
    pub fn set_middlePoint(&mut self, v: ::protobuf::RepeatedField<super::route_common::GeoPoint>) {
        self.middlePoint = v;
    }

    // Mutable pointer to the field.
    pub fn mut_middlePoint(&mut self) -> &mut ::protobuf::RepeatedField<super::route_common::GeoPoint> {
        &mut self.middlePoint
    }

    // Take field
    pub fn take_middlePoint(&mut self) -> ::protobuf::RepeatedField<super::route_common::GeoPoint> {
        ::std::mem::replace(&mut self.middlePoint, ::protobuf::RepeatedField::new())
    }

    // repeated string middlePoiID = 10;


    pub fn get_middlePoiID(&self) -> &[::std::string::String] {
        &self.middlePoiID
    }
    pub fn clear_middlePoiID(&mut self) {
        self.middlePoiID.clear();
    }

    // Param is passed by value, moved
    pub fn set_middlePoiID(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.middlePoiID = v;
    }

    // Mutable pointer to the field.
    pub fn mut_middlePoiID(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.middlePoiID
    }

    // Take field
    pub fn take_middlePoiID(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.middlePoiID, ::protobuf::RepeatedField::new())
    }

    // uint32 responseMode = 11;


    pub fn get_responseMode(&self) -> u32 {
        self.responseMode
    }
    pub fn clear_responseMode(&mut self) {
        self.responseMode = 0;
    }

    // Param is passed by value, moved
    pub fn set_responseMode(&mut self, v: u32) {
        self.responseMode = v;
    }

    // uint32 shapeOptimization = 12;


    pub fn get_shapeOptimization(&self) -> u32 {
        self.shapeOptimization
    }
    pub fn clear_shapeOptimization(&mut self) {
        self.shapeOptimization = 0;
    }

    // Param is passed by value, moved
    pub fn set_shapeOptimization(&mut self, v: u32) {
        self.shapeOptimization = v;
    }

    // string routeIDInNavi = 13;


    pub fn get_routeIDInNavi(&self) -> &str {
        &self.routeIDInNavi
    }
    pub fn clear_routeIDInNavi(&mut self) {
        self.routeIDInNavi.clear();
    }

    // Param is passed by value, moved
    pub fn set_routeIDInNavi(&mut self, v: ::std::string::String) {
        self.routeIDInNavi = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_routeIDInNavi(&mut self) -> &mut ::std::string::String {
        &mut self.routeIDInNavi
    }

    // Take field
    pub fn take_routeIDInNavi(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.routeIDInNavi, ::std::string::String::new())
    }

    // uint32 roadFormForStartPoint = 14;


    pub fn get_roadFormForStartPoint(&self) -> u32 {
        self.roadFormForStartPoint
    }
    pub fn clear_roadFormForStartPoint(&mut self) {
        self.roadFormForStartPoint = 0;
    }

    // Param is passed by value, moved
    pub fn set_roadFormForStartPoint(&mut self, v: u32) {
        self.roadFormForStartPoint = v;
    }

    // uint32 isYaw = 15;


    pub fn get_isYaw(&self) -> u32 {
        self.isYaw
    }
    pub fn clear_isYaw(&mut self) {
        self.isYaw = 0;
    }

    // Param is passed by value, moved
    pub fn set_isYaw(&mut self, v: u32) {
        self.isYaw = v;
    }

    // repeated .cl_route.proto.GeoArea avoidAreas = 16;


    pub fn get_avoidAreas(&self) -> &[super::route_common::GeoArea] {
        &self.avoidAreas
    }
    pub fn clear_avoidAreas(&mut self) {
        self.avoidAreas.clear();
    }

    // Param is passed by value, moved
    pub fn set_avoidAreas(&mut self, v: ::protobuf::RepeatedField<super::route_common::GeoArea>) {
        self.avoidAreas = v;
    }

    // Mutable pointer to the field.
    pub fn mut_avoidAreas(&mut self) -> &mut ::protobuf::RepeatedField<super::route_common::GeoArea> {
        &mut self.avoidAreas
    }

    // Take field
    pub fn take_avoidAreas(&mut self) -> ::protobuf::RepeatedField<super::route_common::GeoArea> {
        ::std::mem::replace(&mut self.avoidAreas, ::protobuf::RepeatedField::new())
    }

    // repeated string avoidRoadIDs = 17;


    pub fn get_avoidRoadIDs(&self) -> &[::std::string::String] {
        &self.avoidRoadIDs
    }
    pub fn clear_avoidRoadIDs(&mut self) {
        self.avoidRoadIDs.clear();
    }

    // Param is passed by value, moved
    pub fn set_avoidRoadIDs(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.avoidRoadIDs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_avoidRoadIDs(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.avoidRoadIDs
    }

    // Take field
    pub fn take_avoidRoadIDs(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.avoidRoadIDs, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for RoutePlanServerParameter {
    fn is_initialized(&self) -> bool {
        if let Some(RoutePlanServerParameter_oneof_start::startPoint(ref v)) = self.start {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(RoutePlanServerParameter_oneof_start::startPoi(ref v)) = self.start {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(RoutePlanServerParameter_oneof_end::endPoint(ref v)) = self.end {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(RoutePlanServerParameter_oneof_end::endPoi(ref v)) = self.end {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.middlePoint {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.avoidAreas {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.version = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.mode = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.policy = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.realTimeTraffic = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.start = ::std::option::Option::Some(RoutePlanServerParameter_oneof_start::startPoint(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.start = ::std::option::Option::Some(RoutePlanServerParameter_oneof_start::startPoi(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.end = ::std::option::Option::Some(RoutePlanServerParameter_oneof_end::endPoint(is.read_message()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.end = ::std::option::Option::Some(RoutePlanServerParameter_oneof_end::endPoi(is.read_message()?));
                },
                9 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.middlePoint)?;
                },
                10 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.middlePoiID)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.responseMode = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.shapeOptimization = tmp;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.routeIDInNavi)?;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.roadFormForStartPoint = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.isYaw = tmp;
                },
                16 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.avoidAreas)?;
                },
                17 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.avoidRoadIDs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(1, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.mode != 0 {
            my_size += ::protobuf::rt::value_size(2, self.mode, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.policy != 0 {
            my_size += ::protobuf::rt::value_size(3, self.policy, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.realTimeTraffic != false {
            my_size += 2;
        }
        for value in &self.middlePoint {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.middlePoiID {
            my_size += ::protobuf::rt::string_size(10, &value);
        };
        if self.responseMode != 0 {
            my_size += ::protobuf::rt::value_size(11, self.responseMode, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.shapeOptimization != 0 {
            my_size += ::protobuf::rt::value_size(12, self.shapeOptimization, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.routeIDInNavi.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.routeIDInNavi);
        }
        if self.roadFormForStartPoint != 0 {
            my_size += ::protobuf::rt::value_size(14, self.roadFormForStartPoint, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.isYaw != 0 {
            my_size += ::protobuf::rt::value_size(15, self.isYaw, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.avoidAreas {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.avoidRoadIDs {
            my_size += ::protobuf::rt::string_size(17, &value);
        };
        if let ::std::option::Option::Some(ref v) = self.start {
            match v {
                &RoutePlanServerParameter_oneof_start::startPoint(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &RoutePlanServerParameter_oneof_start::startPoi(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.end {
            match v {
                &RoutePlanServerParameter_oneof_end::endPoint(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &RoutePlanServerParameter_oneof_end::endPoi(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.version != 0 {
            os.write_uint32(1, self.version)?;
        }
        if self.mode != 0 {
            os.write_uint32(2, self.mode)?;
        }
        if self.policy != 0 {
            os.write_uint32(3, self.policy)?;
        }
        if self.realTimeTraffic != false {
            os.write_bool(4, self.realTimeTraffic)?;
        }
        for v in &self.middlePoint {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.middlePoiID {
            os.write_string(10, &v)?;
        };
        if self.responseMode != 0 {
            os.write_uint32(11, self.responseMode)?;
        }
        if self.shapeOptimization != 0 {
            os.write_uint32(12, self.shapeOptimization)?;
        }
        if !self.routeIDInNavi.is_empty() {
            os.write_string(13, &self.routeIDInNavi)?;
        }
        if self.roadFormForStartPoint != 0 {
            os.write_uint32(14, self.roadFormForStartPoint)?;
        }
        if self.isYaw != 0 {
            os.write_uint32(15, self.isYaw)?;
        }
        for v in &self.avoidAreas {
            os.write_tag(16, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.avoidRoadIDs {
            os.write_string(17, &v)?;
        };
        if let ::std::option::Option::Some(ref v) = self.start {
            match v {
                &RoutePlanServerParameter_oneof_start::startPoint(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &RoutePlanServerParameter_oneof_start::startPoi(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.end {
            match v {
                &RoutePlanServerParameter_oneof_end::endPoint(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &RoutePlanServerParameter_oneof_end::endPoi(ref v) => {
                    os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RoutePlanServerParameter {
        RoutePlanServerParameter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "version",
                |m: &RoutePlanServerParameter| { &m.version },
                |m: &mut RoutePlanServerParameter| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "mode",
                |m: &RoutePlanServerParameter| { &m.mode },
                |m: &mut RoutePlanServerParameter| { &mut m.mode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "policy",
                |m: &RoutePlanServerParameter| { &m.policy },
                |m: &mut RoutePlanServerParameter| { &mut m.policy },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "realTimeTraffic",
                |m: &RoutePlanServerParameter| { &m.realTimeTraffic },
                |m: &mut RoutePlanServerParameter| { &mut m.realTimeTraffic },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::route_common::GeoPoint>(
                "startPoint",
                RoutePlanServerParameter::has_startPoint,
                RoutePlanServerParameter::get_startPoint,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, PoiInfo>(
                "startPoi",
                RoutePlanServerParameter::has_startPoi,
                RoutePlanServerParameter::get_startPoi,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::route_common::GeoPoint>(
                "endPoint",
                RoutePlanServerParameter::has_endPoint,
                RoutePlanServerParameter::get_endPoint,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, PoiInfo>(
                "endPoi",
                RoutePlanServerParameter::has_endPoi,
                RoutePlanServerParameter::get_endPoi,
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::route_common::GeoPoint>>(
                "middlePoint",
                |m: &RoutePlanServerParameter| { &m.middlePoint },
                |m: &mut RoutePlanServerParameter| { &mut m.middlePoint },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "middlePoiID",
                |m: &RoutePlanServerParameter| { &m.middlePoiID },
                |m: &mut RoutePlanServerParameter| { &mut m.middlePoiID },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "responseMode",
                |m: &RoutePlanServerParameter| { &m.responseMode },
                |m: &mut RoutePlanServerParameter| { &mut m.responseMode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "shapeOptimization",
                |m: &RoutePlanServerParameter| { &m.shapeOptimization },
                |m: &mut RoutePlanServerParameter| { &mut m.shapeOptimization },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "routeIDInNavi",
                |m: &RoutePlanServerParameter| { &m.routeIDInNavi },
                |m: &mut RoutePlanServerParameter| { &mut m.routeIDInNavi },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "roadFormForStartPoint",
                |m: &RoutePlanServerParameter| { &m.roadFormForStartPoint },
                |m: &mut RoutePlanServerParameter| { &mut m.roadFormForStartPoint },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "isYaw",
                |m: &RoutePlanServerParameter| { &m.isYaw },
                |m: &mut RoutePlanServerParameter| { &mut m.isYaw },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::route_common::GeoArea>>(
                "avoidAreas",
                |m: &RoutePlanServerParameter| { &m.avoidAreas },
                |m: &mut RoutePlanServerParameter| { &mut m.avoidAreas },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "avoidRoadIDs",
                |m: &RoutePlanServerParameter| { &m.avoidRoadIDs },
                |m: &mut RoutePlanServerParameter| { &mut m.avoidRoadIDs },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RoutePlanServerParameter>(
                "RoutePlanServerParameter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RoutePlanServerParameter {
        static instance: ::protobuf::rt::LazyV2<RoutePlanServerParameter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RoutePlanServerParameter::new)
    }
}

impl ::protobuf::Clear for RoutePlanServerParameter {
    fn clear(&mut self) {
        self.version = 0;
        self.mode = 0;
        self.policy = 0;
        self.realTimeTraffic = false;
        self.start = ::std::option::Option::None;
        self.start = ::std::option::Option::None;
        self.end = ::std::option::Option::None;
        self.end = ::std::option::Option::None;
        self.middlePoint.clear();
        self.middlePoiID.clear();
        self.responseMode = 0;
        self.shapeOptimization = 0;
        self.routeIDInNavi.clear();
        self.roadFormForStartPoint = 0;
        self.isYaw = 0;
        self.avoidAreas.clear();
        self.avoidRoadIDs.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RoutePlanServerParameter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RoutePlanServerParameter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18route_server_param.proto\x12\x0ecl_route.proto\x1a\x12route_common\
    .proto\"\x9b\x01\n\x07PoiInfo\x12\x14\n\x05poiID\x18\x01\x20\x01(\x04R\
    \x05poiID\x12\x18\n\x07poiName\x18\x02\x20\x01(\tR\x07poiName\x12\x16\n\
    \x06roadID\x18\x03\x20\x01(\x04R\x06roadID\x12.\n\x05entry\x18\x04\x20\
    \x01(\x0b2\x18.cl_route.proto.GeoPointR\x05entry\x12\x18\n\x07modelID\
    \x18\x05\x20\x01(\x04R\x07modelID\"\xf7\x05\n\x18RoutePlanServerParamete\
    r\x12\x18\n\x07version\x18\x01\x20\x01(\rR\x07version\x12\x12\n\x04mode\
    \x18\x02\x20\x01(\rR\x04mode\x12\x16\n\x06policy\x18\x03\x20\x01(\rR\x06\
    policy\x12(\n\x0frealTimeTraffic\x18\x04\x20\x01(\x08R\x0frealTimeTraffi\
    c\x12:\n\nstartPoint\x18\x05\x20\x01(\x0b2\x18.cl_route.proto.GeoPointH\
    \0R\nstartPoint\x125\n\x08startPoi\x18\x06\x20\x01(\x0b2\x17.cl_route.pr\
    oto.PoiInfoH\0R\x08startPoi\x126\n\x08endPoint\x18\x07\x20\x01(\x0b2\x18\
    .cl_route.proto.GeoPointH\x01R\x08endPoint\x121\n\x06endPoi\x18\x08\x20\
    \x01(\x0b2\x17.cl_route.proto.PoiInfoH\x01R\x06endPoi\x12:\n\x0bmiddlePo\
    int\x18\t\x20\x03(\x0b2\x18.cl_route.proto.GeoPointR\x0bmiddlePoint\x12\
    \x20\n\x0bmiddlePoiID\x18\n\x20\x03(\tR\x0bmiddlePoiID\x12\"\n\x0crespon\
    seMode\x18\x0b\x20\x01(\rR\x0cresponseMode\x12,\n\x11shapeOptimization\
    \x18\x0c\x20\x01(\rR\x11shapeOptimization\x12$\n\rrouteIDInNavi\x18\r\
    \x20\x01(\tR\rrouteIDInNavi\x124\n\x15roadFormForStartPoint\x18\x0e\x20\
    \x01(\rR\x15roadFormForStartPoint\x12\x14\n\x05isYaw\x18\x0f\x20\x01(\rR\
    \x05isYaw\x127\n\navoidAreas\x18\x10\x20\x03(\x0b2\x17.cl_route.proto.Ge\
    oAreaR\navoidAreas\x12\"\n\x0cavoidRoadIDs\x18\x11\x20\x03(\tR\x0cavoidR\
    oadIDsB\x07\n\x05startB\x05\n\x03endB\x14Z\x12../service;serviceb\x06pro\
    to3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
