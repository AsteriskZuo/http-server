// This file is generated by rust-protobuf 2.25.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `route_client_param.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_1;

#[derive(PartialEq,Clone,Default)]
pub struct RoutePlanClientParameter {
    // message fields
    pub version: u32,
    pub mode: u32,
    pub policy: u32,
    pub realTimeTraffic: bool,
    pub startPoint: ::protobuf::SingularPtrField<super::route_common::GeoPoint>,
    pub endPoint: ::protobuf::SingularPtrField<super::route_common::GeoPoint>,
    pub middlePoint: ::protobuf::RepeatedField<super::route_common::GeoPoint>,
    pub startPoiID: ::std::string::String,
    pub endPoiID: ::std::string::String,
    pub middlePoiID: ::protobuf::RepeatedField<::std::string::String>,
    pub responseMode: u32,
    pub shapeOptimization: u32,
    pub routeIDInNavi: ::std::string::String,
    pub roadFormForStartPoint: u32,
    pub isYaw: u32,
    pub avoidAreas: ::protobuf::RepeatedField<super::route_common::GeoArea>,
    pub avoidRoadIDs: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RoutePlanClientParameter {
    fn default() -> &'a RoutePlanClientParameter {
        <RoutePlanClientParameter as ::protobuf::Message>::default_instance()
    }
}

impl RoutePlanClientParameter {
    pub fn new() -> RoutePlanClientParameter {
        ::std::default::Default::default()
    }

    // uint32 version = 1;


    pub fn get_version(&self) -> u32 {
        self.version
    }
    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u32) {
        self.version = v;
    }

    // uint32 mode = 2;


    pub fn get_mode(&self) -> u32 {
        self.mode
    }
    pub fn clear_mode(&mut self) {
        self.mode = 0;
    }

    // Param is passed by value, moved
    pub fn set_mode(&mut self, v: u32) {
        self.mode = v;
    }

    // uint32 policy = 3;


    pub fn get_policy(&self) -> u32 {
        self.policy
    }
    pub fn clear_policy(&mut self) {
        self.policy = 0;
    }

    // Param is passed by value, moved
    pub fn set_policy(&mut self, v: u32) {
        self.policy = v;
    }

    // bool realTimeTraffic = 4;


    pub fn get_realTimeTraffic(&self) -> bool {
        self.realTimeTraffic
    }
    pub fn clear_realTimeTraffic(&mut self) {
        self.realTimeTraffic = false;
    }

    // Param is passed by value, moved
    pub fn set_realTimeTraffic(&mut self, v: bool) {
        self.realTimeTraffic = v;
    }

    // .cl_route.proto.GeoPoint startPoint = 5;


    pub fn get_startPoint(&self) -> &super::route_common::GeoPoint {
        self.startPoint.as_ref().unwrap_or_else(|| <super::route_common::GeoPoint as ::protobuf::Message>::default_instance())
    }
    pub fn clear_startPoint(&mut self) {
        self.startPoint.clear();
    }

    pub fn has_startPoint(&self) -> bool {
        self.startPoint.is_some()
    }

    // Param is passed by value, moved
    pub fn set_startPoint(&mut self, v: super::route_common::GeoPoint) {
        self.startPoint = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_startPoint(&mut self) -> &mut super::route_common::GeoPoint {
        if self.startPoint.is_none() {
            self.startPoint.set_default();
        }
        self.startPoint.as_mut().unwrap()
    }

    // Take field
    pub fn take_startPoint(&mut self) -> super::route_common::GeoPoint {
        self.startPoint.take().unwrap_or_else(|| super::route_common::GeoPoint::new())
    }

    // .cl_route.proto.GeoPoint endPoint = 6;


    pub fn get_endPoint(&self) -> &super::route_common::GeoPoint {
        self.endPoint.as_ref().unwrap_or_else(|| <super::route_common::GeoPoint as ::protobuf::Message>::default_instance())
    }
    pub fn clear_endPoint(&mut self) {
        self.endPoint.clear();
    }

    pub fn has_endPoint(&self) -> bool {
        self.endPoint.is_some()
    }

    // Param is passed by value, moved
    pub fn set_endPoint(&mut self, v: super::route_common::GeoPoint) {
        self.endPoint = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_endPoint(&mut self) -> &mut super::route_common::GeoPoint {
        if self.endPoint.is_none() {
            self.endPoint.set_default();
        }
        self.endPoint.as_mut().unwrap()
    }

    // Take field
    pub fn take_endPoint(&mut self) -> super::route_common::GeoPoint {
        self.endPoint.take().unwrap_or_else(|| super::route_common::GeoPoint::new())
    }

    // repeated .cl_route.proto.GeoPoint middlePoint = 7;


    pub fn get_middlePoint(&self) -> &[super::route_common::GeoPoint] {
        &self.middlePoint
    }
    pub fn clear_middlePoint(&mut self) {
        self.middlePoint.clear();
    }

    // Param is passed by value, moved
    pub fn set_middlePoint(&mut self, v: ::protobuf::RepeatedField<super::route_common::GeoPoint>) {
        self.middlePoint = v;
    }

    // Mutable pointer to the field.
    pub fn mut_middlePoint(&mut self) -> &mut ::protobuf::RepeatedField<super::route_common::GeoPoint> {
        &mut self.middlePoint
    }

    // Take field
    pub fn take_middlePoint(&mut self) -> ::protobuf::RepeatedField<super::route_common::GeoPoint> {
        ::std::mem::replace(&mut self.middlePoint, ::protobuf::RepeatedField::new())
    }

    // string startPoiID = 8;


    pub fn get_startPoiID(&self) -> &str {
        &self.startPoiID
    }
    pub fn clear_startPoiID(&mut self) {
        self.startPoiID.clear();
    }

    // Param is passed by value, moved
    pub fn set_startPoiID(&mut self, v: ::std::string::String) {
        self.startPoiID = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_startPoiID(&mut self) -> &mut ::std::string::String {
        &mut self.startPoiID
    }

    // Take field
    pub fn take_startPoiID(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.startPoiID, ::std::string::String::new())
    }

    // string endPoiID = 9;


    pub fn get_endPoiID(&self) -> &str {
        &self.endPoiID
    }
    pub fn clear_endPoiID(&mut self) {
        self.endPoiID.clear();
    }

    // Param is passed by value, moved
    pub fn set_endPoiID(&mut self, v: ::std::string::String) {
        self.endPoiID = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_endPoiID(&mut self) -> &mut ::std::string::String {
        &mut self.endPoiID
    }

    // Take field
    pub fn take_endPoiID(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.endPoiID, ::std::string::String::new())
    }

    // repeated string middlePoiID = 10;


    pub fn get_middlePoiID(&self) -> &[::std::string::String] {
        &self.middlePoiID
    }
    pub fn clear_middlePoiID(&mut self) {
        self.middlePoiID.clear();
    }

    // Param is passed by value, moved
    pub fn set_middlePoiID(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.middlePoiID = v;
    }

    // Mutable pointer to the field.
    pub fn mut_middlePoiID(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.middlePoiID
    }

    // Take field
    pub fn take_middlePoiID(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.middlePoiID, ::protobuf::RepeatedField::new())
    }

    // uint32 responseMode = 11;


    pub fn get_responseMode(&self) -> u32 {
        self.responseMode
    }
    pub fn clear_responseMode(&mut self) {
        self.responseMode = 0;
    }

    // Param is passed by value, moved
    pub fn set_responseMode(&mut self, v: u32) {
        self.responseMode = v;
    }

    // uint32 shapeOptimization = 12;


    pub fn get_shapeOptimization(&self) -> u32 {
        self.shapeOptimization
    }
    pub fn clear_shapeOptimization(&mut self) {
        self.shapeOptimization = 0;
    }

    // Param is passed by value, moved
    pub fn set_shapeOptimization(&mut self, v: u32) {
        self.shapeOptimization = v;
    }

    // string routeIDInNavi = 13;


    pub fn get_routeIDInNavi(&self) -> &str {
        &self.routeIDInNavi
    }
    pub fn clear_routeIDInNavi(&mut self) {
        self.routeIDInNavi.clear();
    }

    // Param is passed by value, moved
    pub fn set_routeIDInNavi(&mut self, v: ::std::string::String) {
        self.routeIDInNavi = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_routeIDInNavi(&mut self) -> &mut ::std::string::String {
        &mut self.routeIDInNavi
    }

    // Take field
    pub fn take_routeIDInNavi(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.routeIDInNavi, ::std::string::String::new())
    }

    // uint32 roadFormForStartPoint = 14;


    pub fn get_roadFormForStartPoint(&self) -> u32 {
        self.roadFormForStartPoint
    }
    pub fn clear_roadFormForStartPoint(&mut self) {
        self.roadFormForStartPoint = 0;
    }

    // Param is passed by value, moved
    pub fn set_roadFormForStartPoint(&mut self, v: u32) {
        self.roadFormForStartPoint = v;
    }

    // uint32 isYaw = 15;


    pub fn get_isYaw(&self) -> u32 {
        self.isYaw
    }
    pub fn clear_isYaw(&mut self) {
        self.isYaw = 0;
    }

    // Param is passed by value, moved
    pub fn set_isYaw(&mut self, v: u32) {
        self.isYaw = v;
    }

    // repeated .cl_route.proto.GeoArea avoidAreas = 16;


    pub fn get_avoidAreas(&self) -> &[super::route_common::GeoArea] {
        &self.avoidAreas
    }
    pub fn clear_avoidAreas(&mut self) {
        self.avoidAreas.clear();
    }

    // Param is passed by value, moved
    pub fn set_avoidAreas(&mut self, v: ::protobuf::RepeatedField<super::route_common::GeoArea>) {
        self.avoidAreas = v;
    }

    // Mutable pointer to the field.
    pub fn mut_avoidAreas(&mut self) -> &mut ::protobuf::RepeatedField<super::route_common::GeoArea> {
        &mut self.avoidAreas
    }

    // Take field
    pub fn take_avoidAreas(&mut self) -> ::protobuf::RepeatedField<super::route_common::GeoArea> {
        ::std::mem::replace(&mut self.avoidAreas, ::protobuf::RepeatedField::new())
    }

    // repeated string avoidRoadIDs = 17;


    pub fn get_avoidRoadIDs(&self) -> &[::std::string::String] {
        &self.avoidRoadIDs
    }
    pub fn clear_avoidRoadIDs(&mut self) {
        self.avoidRoadIDs.clear();
    }

    // Param is passed by value, moved
    pub fn set_avoidRoadIDs(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.avoidRoadIDs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_avoidRoadIDs(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.avoidRoadIDs
    }

    // Take field
    pub fn take_avoidRoadIDs(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.avoidRoadIDs, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for RoutePlanClientParameter {
    fn is_initialized(&self) -> bool {
        for v in &self.startPoint {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.endPoint {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.middlePoint {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.avoidAreas {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.version = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.mode = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.policy = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.realTimeTraffic = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.startPoint)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.endPoint)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.middlePoint)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.startPoiID)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.endPoiID)?;
                },
                10 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.middlePoiID)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.responseMode = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.shapeOptimization = tmp;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.routeIDInNavi)?;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.roadFormForStartPoint = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.isYaw = tmp;
                },
                16 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.avoidAreas)?;
                },
                17 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.avoidRoadIDs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(1, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.mode != 0 {
            my_size += ::protobuf::rt::value_size(2, self.mode, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.policy != 0 {
            my_size += ::protobuf::rt::value_size(3, self.policy, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.realTimeTraffic != false {
            my_size += 2;
        }
        if let Some(ref v) = self.startPoint.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.endPoint.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.middlePoint {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.startPoiID.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.startPoiID);
        }
        if !self.endPoiID.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.endPoiID);
        }
        for value in &self.middlePoiID {
            my_size += ::protobuf::rt::string_size(10, &value);
        };
        if self.responseMode != 0 {
            my_size += ::protobuf::rt::value_size(11, self.responseMode, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.shapeOptimization != 0 {
            my_size += ::protobuf::rt::value_size(12, self.shapeOptimization, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.routeIDInNavi.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.routeIDInNavi);
        }
        if self.roadFormForStartPoint != 0 {
            my_size += ::protobuf::rt::value_size(14, self.roadFormForStartPoint, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.isYaw != 0 {
            my_size += ::protobuf::rt::value_size(15, self.isYaw, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.avoidAreas {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.avoidRoadIDs {
            my_size += ::protobuf::rt::string_size(17, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.version != 0 {
            os.write_uint32(1, self.version)?;
        }
        if self.mode != 0 {
            os.write_uint32(2, self.mode)?;
        }
        if self.policy != 0 {
            os.write_uint32(3, self.policy)?;
        }
        if self.realTimeTraffic != false {
            os.write_bool(4, self.realTimeTraffic)?;
        }
        if let Some(ref v) = self.startPoint.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.endPoint.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.middlePoint {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.startPoiID.is_empty() {
            os.write_string(8, &self.startPoiID)?;
        }
        if !self.endPoiID.is_empty() {
            os.write_string(9, &self.endPoiID)?;
        }
        for v in &self.middlePoiID {
            os.write_string(10, &v)?;
        };
        if self.responseMode != 0 {
            os.write_uint32(11, self.responseMode)?;
        }
        if self.shapeOptimization != 0 {
            os.write_uint32(12, self.shapeOptimization)?;
        }
        if !self.routeIDInNavi.is_empty() {
            os.write_string(13, &self.routeIDInNavi)?;
        }
        if self.roadFormForStartPoint != 0 {
            os.write_uint32(14, self.roadFormForStartPoint)?;
        }
        if self.isYaw != 0 {
            os.write_uint32(15, self.isYaw)?;
        }
        for v in &self.avoidAreas {
            os.write_tag(16, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.avoidRoadIDs {
            os.write_string(17, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RoutePlanClientParameter {
        RoutePlanClientParameter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "version",
                |m: &RoutePlanClientParameter| { &m.version },
                |m: &mut RoutePlanClientParameter| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "mode",
                |m: &RoutePlanClientParameter| { &m.mode },
                |m: &mut RoutePlanClientParameter| { &mut m.mode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "policy",
                |m: &RoutePlanClientParameter| { &m.policy },
                |m: &mut RoutePlanClientParameter| { &mut m.policy },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "realTimeTraffic",
                |m: &RoutePlanClientParameter| { &m.realTimeTraffic },
                |m: &mut RoutePlanClientParameter| { &mut m.realTimeTraffic },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::route_common::GeoPoint>>(
                "startPoint",
                |m: &RoutePlanClientParameter| { &m.startPoint },
                |m: &mut RoutePlanClientParameter| { &mut m.startPoint },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::route_common::GeoPoint>>(
                "endPoint",
                |m: &RoutePlanClientParameter| { &m.endPoint },
                |m: &mut RoutePlanClientParameter| { &mut m.endPoint },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::route_common::GeoPoint>>(
                "middlePoint",
                |m: &RoutePlanClientParameter| { &m.middlePoint },
                |m: &mut RoutePlanClientParameter| { &mut m.middlePoint },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "startPoiID",
                |m: &RoutePlanClientParameter| { &m.startPoiID },
                |m: &mut RoutePlanClientParameter| { &mut m.startPoiID },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "endPoiID",
                |m: &RoutePlanClientParameter| { &m.endPoiID },
                |m: &mut RoutePlanClientParameter| { &mut m.endPoiID },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "middlePoiID",
                |m: &RoutePlanClientParameter| { &m.middlePoiID },
                |m: &mut RoutePlanClientParameter| { &mut m.middlePoiID },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "responseMode",
                |m: &RoutePlanClientParameter| { &m.responseMode },
                |m: &mut RoutePlanClientParameter| { &mut m.responseMode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "shapeOptimization",
                |m: &RoutePlanClientParameter| { &m.shapeOptimization },
                |m: &mut RoutePlanClientParameter| { &mut m.shapeOptimization },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "routeIDInNavi",
                |m: &RoutePlanClientParameter| { &m.routeIDInNavi },
                |m: &mut RoutePlanClientParameter| { &mut m.routeIDInNavi },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "roadFormForStartPoint",
                |m: &RoutePlanClientParameter| { &m.roadFormForStartPoint },
                |m: &mut RoutePlanClientParameter| { &mut m.roadFormForStartPoint },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "isYaw",
                |m: &RoutePlanClientParameter| { &m.isYaw },
                |m: &mut RoutePlanClientParameter| { &mut m.isYaw },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::route_common::GeoArea>>(
                "avoidAreas",
                |m: &RoutePlanClientParameter| { &m.avoidAreas },
                |m: &mut RoutePlanClientParameter| { &mut m.avoidAreas },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "avoidRoadIDs",
                |m: &RoutePlanClientParameter| { &m.avoidRoadIDs },
                |m: &mut RoutePlanClientParameter| { &mut m.avoidRoadIDs },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RoutePlanClientParameter>(
                "RoutePlanClientParameter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RoutePlanClientParameter {
        static instance: ::protobuf::rt::LazyV2<RoutePlanClientParameter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RoutePlanClientParameter::new)
    }
}

impl ::protobuf::Clear for RoutePlanClientParameter {
    fn clear(&mut self) {
        self.version = 0;
        self.mode = 0;
        self.policy = 0;
        self.realTimeTraffic = false;
        self.startPoint.clear();
        self.endPoint.clear();
        self.middlePoint.clear();
        self.startPoiID.clear();
        self.endPoiID.clear();
        self.middlePoiID.clear();
        self.responseMode = 0;
        self.shapeOptimization = 0;
        self.routeIDInNavi.clear();
        self.roadFormForStartPoint = 0;
        self.isYaw = 0;
        self.avoidAreas.clear();
        self.avoidRoadIDs.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RoutePlanClientParameter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RoutePlanClientParameter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18route_client_param.proto\x12\x0ecl_route.proto\x1a\x12route_common\
    .proto\"\xb5\x05\n\x18RoutePlanClientParameter\x12\x18\n\x07version\x18\
    \x01\x20\x01(\rR\x07version\x12\x12\n\x04mode\x18\x02\x20\x01(\rR\x04mod\
    e\x12\x16\n\x06policy\x18\x03\x20\x01(\rR\x06policy\x12(\n\x0frealTimeTr\
    affic\x18\x04\x20\x01(\x08R\x0frealTimeTraffic\x128\n\nstartPoint\x18\
    \x05\x20\x01(\x0b2\x18.cl_route.proto.GeoPointR\nstartPoint\x124\n\x08en\
    dPoint\x18\x06\x20\x01(\x0b2\x18.cl_route.proto.GeoPointR\x08endPoint\
    \x12:\n\x0bmiddlePoint\x18\x07\x20\x03(\x0b2\x18.cl_route.proto.GeoPoint\
    R\x0bmiddlePoint\x12\x1e\n\nstartPoiID\x18\x08\x20\x01(\tR\nstartPoiID\
    \x12\x1a\n\x08endPoiID\x18\t\x20\x01(\tR\x08endPoiID\x12\x20\n\x0bmiddle\
    PoiID\x18\n\x20\x03(\tR\x0bmiddlePoiID\x12\"\n\x0cresponseMode\x18\x0b\
    \x20\x01(\rR\x0cresponseMode\x12,\n\x11shapeOptimization\x18\x0c\x20\x01\
    (\rR\x11shapeOptimization\x12$\n\rrouteIDInNavi\x18\r\x20\x01(\tR\rroute\
    IDInNavi\x124\n\x15roadFormForStartPoint\x18\x0e\x20\x01(\rR\x15roadForm\
    ForStartPoint\x12\x14\n\x05isYaw\x18\x0f\x20\x01(\rR\x05isYaw\x127\n\nav\
    oidAreas\x18\x10\x20\x03(\x0b2\x17.cl_route.proto.GeoAreaR\navoidAreas\
    \x12\"\n\x0cavoidRoadIDs\x18\x11\x20\x03(\tR\x0cavoidRoadIDsB1\n\x1bcom.\
    citylife.route.protocolZ\x12../service;serviceb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
